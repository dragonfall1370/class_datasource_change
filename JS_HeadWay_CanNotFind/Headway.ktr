<?xml version="1.0" encoding="UTF-8"?>
<transformation>
  <info>
    <name>Headway</name>
    <description/>
    <extended_description/>
    <trans_version/>
    <trans_type>Normal</trans_type>
    <directory>/</directory>
    <parameters>
    </parameters>
    <log>
      <trans-log-table>
        <connection/>
        <schema/>
        <table/>
        <size_limit_lines/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STATUS</id>
          <enabled>Y</enabled>
          <name>STATUS</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
          <subject/>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
          <subject/>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
          <subject/>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
          <subject/>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
          <subject/>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>STARTDATE</id>
          <enabled>Y</enabled>
          <name>STARTDATE</name>
        </field>
        <field>
          <id>ENDDATE</id>
          <enabled>Y</enabled>
          <name>ENDDATE</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>DEPDATE</id>
          <enabled>Y</enabled>
          <name>DEPDATE</name>
        </field>
        <field>
          <id>REPLAYDATE</id>
          <enabled>Y</enabled>
          <name>REPLAYDATE</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>Y</enabled>
          <name>LOG_FIELD</name>
        </field>
        <field>
          <id>EXECUTING_SERVER</id>
          <enabled>N</enabled>
          <name>EXECUTING_SERVER</name>
        </field>
        <field>
          <id>EXECUTING_USER</id>
          <enabled>N</enabled>
          <name>EXECUTING_USER</name>
        </field>
        <field>
          <id>CLIENT</id>
          <enabled>N</enabled>
          <name>CLIENT</name>
        </field>
      </trans-log-table>
      <perf-log-table>
        <connection/>
        <schema/>
        <table/>
        <interval/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>SEQ_NR</id>
          <enabled>Y</enabled>
          <name>SEQ_NR</name>
        </field>
        <field>
          <id>LOGDATE</id>
          <enabled>Y</enabled>
          <name>LOGDATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>INPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>INPUT_BUFFER_ROWS</name>
        </field>
        <field>
          <id>OUTPUT_BUFFER_ROWS</id>
          <enabled>Y</enabled>
          <name>OUTPUT_BUFFER_ROWS</name>
        </field>
      </perf-log-table>
      <channel-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>LOGGING_OBJECT_TYPE</id>
          <enabled>Y</enabled>
          <name>LOGGING_OBJECT_TYPE</name>
        </field>
        <field>
          <id>OBJECT_NAME</id>
          <enabled>Y</enabled>
          <name>OBJECT_NAME</name>
        </field>
        <field>
          <id>OBJECT_COPY</id>
          <enabled>Y</enabled>
          <name>OBJECT_COPY</name>
        </field>
        <field>
          <id>REPOSITORY_DIRECTORY</id>
          <enabled>Y</enabled>
          <name>REPOSITORY_DIRECTORY</name>
        </field>
        <field>
          <id>FILENAME</id>
          <enabled>Y</enabled>
          <name>FILENAME</name>
        </field>
        <field>
          <id>OBJECT_ID</id>
          <enabled>Y</enabled>
          <name>OBJECT_ID</name>
        </field>
        <field>
          <id>OBJECT_REVISION</id>
          <enabled>Y</enabled>
          <name>OBJECT_REVISION</name>
        </field>
        <field>
          <id>PARENT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>PARENT_CHANNEL_ID</name>
        </field>
        <field>
          <id>ROOT_CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>ROOT_CHANNEL_ID</name>
        </field>
      </channel-log-table>
      <step-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>TRANSNAME</id>
          <enabled>Y</enabled>
          <name>TRANSNAME</name>
        </field>
        <field>
          <id>STEPNAME</id>
          <enabled>Y</enabled>
          <name>STEPNAME</name>
        </field>
        <field>
          <id>STEP_COPY</id>
          <enabled>Y</enabled>
          <name>STEP_COPY</name>
        </field>
        <field>
          <id>LINES_READ</id>
          <enabled>Y</enabled>
          <name>LINES_READ</name>
        </field>
        <field>
          <id>LINES_WRITTEN</id>
          <enabled>Y</enabled>
          <name>LINES_WRITTEN</name>
        </field>
        <field>
          <id>LINES_UPDATED</id>
          <enabled>Y</enabled>
          <name>LINES_UPDATED</name>
        </field>
        <field>
          <id>LINES_INPUT</id>
          <enabled>Y</enabled>
          <name>LINES_INPUT</name>
        </field>
        <field>
          <id>LINES_OUTPUT</id>
          <enabled>Y</enabled>
          <name>LINES_OUTPUT</name>
        </field>
        <field>
          <id>LINES_REJECTED</id>
          <enabled>Y</enabled>
          <name>LINES_REJECTED</name>
        </field>
        <field>
          <id>ERRORS</id>
          <enabled>Y</enabled>
          <name>ERRORS</name>
        </field>
        <field>
          <id>LOG_FIELD</id>
          <enabled>N</enabled>
          <name>LOG_FIELD</name>
        </field>
      </step-log-table>
      <metrics-log-table>
        <connection/>
        <schema/>
        <table/>
        <timeout_days/>
        <field>
          <id>ID_BATCH</id>
          <enabled>Y</enabled>
          <name>ID_BATCH</name>
        </field>
        <field>
          <id>CHANNEL_ID</id>
          <enabled>Y</enabled>
          <name>CHANNEL_ID</name>
        </field>
        <field>
          <id>LOG_DATE</id>
          <enabled>Y</enabled>
          <name>LOG_DATE</name>
        </field>
        <field>
          <id>METRICS_DATE</id>
          <enabled>Y</enabled>
          <name>METRICS_DATE</name>
        </field>
        <field>
          <id>METRICS_CODE</id>
          <enabled>Y</enabled>
          <name>METRICS_CODE</name>
        </field>
        <field>
          <id>METRICS_DESCRIPTION</id>
          <enabled>Y</enabled>
          <name>METRICS_DESCRIPTION</name>
        </field>
        <field>
          <id>METRICS_SUBJECT</id>
          <enabled>Y</enabled>
          <name>METRICS_SUBJECT</name>
        </field>
        <field>
          <id>METRICS_TYPE</id>
          <enabled>Y</enabled>
          <name>METRICS_TYPE</name>
        </field>
        <field>
          <id>METRICS_VALUE</id>
          <enabled>Y</enabled>
          <name>METRICS_VALUE</name>
        </field>
      </metrics-log-table>
    </log>
    <maxdate>
      <connection/>
      <table/>
      <field/>
      <offset>0.0</offset>
      <maxdiff>0.0</maxdiff>
    </maxdate>
    <size_rowset>10000</size_rowset>
    <sleep_time_empty>50</sleep_time_empty>
    <sleep_time_full>50</sleep_time_full>
    <unique_connections>N</unique_connections>
    <feedback_shown>Y</feedback_shown>
    <feedback_size>50000</feedback_size>
    <using_thread_priorities>Y</using_thread_priorities>
    <shared_objects_file/>
    <capture_step_performance>N</capture_step_performance>
    <step_performance_capturing_delay>1000</step_performance_capturing_delay>
    <step_performance_capturing_size_limit>100</step_performance_capturing_size_limit>
    <dependencies>
    </dependencies>
    <partitionschemas>
    </partitionschemas>
    <slaveservers>
    </slaveservers>
    <clusterschemas>
    </clusterschemas>
    <created_user>-</created_user>
    <created_date>2019/01/30 14:16:43.798</created_date>
    <modified_user>-</modified_user>
    <modified_date>2019/01/30 14:16:43.798</modified_date>
    <key_for_session_key>H4sIAAAAAAAAAAMAAAAAAAAAAAA=</key_for_session_key>
    <is_key_private>N</is_key_private>
  </info>
  <notepads>
    <notepad>
      <note>activities comment
</note>
      <xloc>304</xloc>
      <yloc>528</yloc>
      <width>112</width>
      <heigth>41</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>Candidate</note>
      <xloc>1168</xloc>
      <yloc>512</yloc>
      <width>65</width>
      <heigth>26</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
    <notepad>
      <note>candidate custom field</note>
      <xloc>464</xloc>
      <yloc>1440</yloc>
      <width>132</width>
      <heigth>26</heigth>
      <fontname>Segoe UI</fontname>
      <fontsize>9</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>205</backgroundcolorgreen>
      <backgroundcolorblue>112</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
  <connection>
    <name>Headway Postgres</name>
    <server>rdbm</server>
    <type>POSTGRESQL</type>
    <access>Native</access>
    <database>headwayrecruitment.vincere.io</database>
    <port>5432</port>
    <username>jason</username>
    <password>Encrypted 2be98afc86aa7f2e4861f832588bfa5ee</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>5432</attribute>
      </attribute>
      <attribute>
        <code>PRESERVE_RESERVED_WORD_CASE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_TIMESTAMP_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <connection>
    <name>Headway Source</name>
    <server>localhost</server>
    <type>MSSQLNATIVE</type>
    <access>Native</access>
    <database>Headway_infinity</database>
    <port>1433</port>
    <username>sa</username>
    <password>Encrypted 2be98afc86aa7f2d5f94aea35e083b8df</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_LOWERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>FORCE_IDENTIFIERS_TO_UPPERCASE</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>IS_CLUSTERED</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>MSSQLUseIntegratedSecurity</code>
        <attribute>false</attribute>
      </attribute>
      <attribute>
        <code>MSSQL_DOUBLE_DECIMAL_SEPARATOR</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>PORT_NUMBER</code>
        <attribute>1433</attribute>
      </attribute>
      <attribute>
        <code>PRESERVE_RESERVED_WORD_CASE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>QUOTE_ALL_FIELDS</code>
        <attribute>N</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_BOOLEAN_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>SUPPORTS_TIMESTAMP_DATA_TYPE</code>
        <attribute>Y</attribute>
      </attribute>
      <attribute>
        <code>USE_POOLING</code>
        <attribute>N</attribute>
      </attribute>
    </attributes>
  </connection>
  <order>
    <hop>
      <from>VC Can Lookup 3 2</from>
      <to>VC Job Lookup 3 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC Job Lookup 3 2</from>
      <to>VC JobApp Lookup 2 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC JobApp Lookup 2 2</from>
      <to>Update JobApp status 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC JobApp Lookup 2 2</from>
      <to>VC Offer Lookup</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC Offer Lookup</from>
      <to>Insert / Update invoice</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC Offer Lookup</from>
      <to>Insert / Update offer_personal_info</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC Offer Lookup</from>
      <to>Update offer</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC Offer Lookup</from>
      <to>Database lookup 26</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>replaced applications</from>
      <to>VC Can Lookup 3 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>update info</from>
      <to>VC Can Lookup 3 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 26</from>
      <to>update note</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Company Activities</from>
      <to>Database lookup</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup</from>
      <to>Table output</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 2</from>
      <to>Table output 3</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Table input</from>
      <to>Table output 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>job</from>
      <to>Table output 2 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>job activity</from>
      <to>Database lookup 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Candidate Comment</from>
      <to>Candidate look up</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Candidate look up</from>
      <to>candidate_activity</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>candidate input</from>
      <to>Table output 2 3</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Contact Activities 1</from>
      <to>Database lookup 3</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 3</from>
      <to>Table output 5</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Table input 4 2</from>
      <to>Table output 6</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Contact 2</from>
      <to>Database lookup 3</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Candidate Activity 2</from>
      <to>Candidate look up</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>facebook url</from>
      <to>Database lookup 4</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 4</from>
      <to>Update</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>VC Offer Lookup</from>
      <to>update gross salary</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>DOB</from>
      <to>Database lookup 4</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 4</from>
      <to>Update 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 4</from>
      <to>Update 2 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>nationality</from>
      <to>Database lookup 4</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>company address fix</from>
      <to>Database lookup 5</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 5</from>
      <to>Update 3</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>EML Candidate Activities</from>
      <to>Candidate look up</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 2 2 2</from>
      <to>Table output 8 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Candidate Document</from>
      <to>Database lookup 2 2 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>GDPR</from>
      <to>Database lookup 6</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 6</from>
      <to>Table output 4</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>custom note</from>
      <to>Database lookup 7</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 7</from>
      <to>Update 4</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Car Custom Field</from>
      <to>form &amp; field ID lookup</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 3 2</from>
      <to>Database lookup 4 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 4 2</from>
      <to>pick list</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>candidate ID lookup</from>
      <to>Database lookup 3 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>form &amp; field ID lookup</from>
      <to>candidate ID lookup</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Candidate Skills</from>
      <to>Database lookup 5 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 5 2</from>
      <to>Update 4 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>EML Contact Activities</from>
      <to>Database lookup 3</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>EML company activities</from>
      <to>Database lookup</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>EML to activities 2</from>
      <to>Database lookup</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>EML activities 1</from>
      <to>Database lookup 2</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>EML candidate activities 2</from>
      <to>Candidate look up</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>candidate photo</from>
      <to>Database lookup 2 2 2</to>
      <enabled>Y</enabled>
    </hop>
    <hop>
      <from>Company Doc</from>
      <to>Database lookup 8</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>job document</from>
      <to>Database lookup 9</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 8</from>
      <to>Table output 7</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>Database lookup 9</from>
      <to>Table output 8</to>
      <enabled>N</enabled>
    </hop>
    <hop>
      <from>candidate GDPR doc</from>
      <to>Database lookup 2 2 2</to>
      <enabled>N</enabled>
    </hop>
  </order>
  <step>
    <name>Candidate Activity 2</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>--select * from lEventCandidateTelecom
--Get Candidate Events
with tempEventCandidateTelecom as (select ect.intEventId, ct.intCandidateId , p.vchForename, p.vchSurname, ct.vchDescription, ct.vchValue, ct.vchExtension, concat (ct.vchValue, ct.vchExtension) as telValue
from lEventCandidateTelecom ect left join dCandidateTelecom ct on ect.intCandidateTelecomId = ct.intCandidateTelecomId
				left join dCandidate c on ct.intCandidateId = c.intCandidateId
				left join dPerson p on c.intPersonId = p.intPersonId)
-------above table has some events using 2 telecom type

, tempEventContact as (select ectc.intEventId contactEventId, ectc.intCompanyTierId, ectc.intContactId as ContactId, 
	--ctc.intCompanyTierContactId,
	ct.vchCompanyTierName,
	--p.vchForeName as contactForeName, p.vchSurname as contactSurName, 
	coalesce(NULLIF(p.vchForename, ''), '') + Coalesce(' ' + NULLIF(p.vchSurname, ''), '') as contactName
from lEventCompanyTierContact ectc left join dEvent e on ectc.intEventId = e.intEventId
				left join dContact c on ectc.intContactId = c.intContactId
				left join dPerson p on c.intPersonId = p.intPersonId
				left join lCompanyTierContact ctc on ectc.intContactId = ctc.intContactId and ectc.intCompanyTierId = ctc.intCompanyTierId
				left join dCompanyTier ct on ectc.intCompanyTierId = ct.intCompanyTierId)

, tempEventCandidate as (
select ec.intEventId as EventId, ec.intCandidateId as CandidateId, 
	e.sdtEventDate, e.intLoggedById, e.tintDirection, e.bitAutoEvent, e.tintEventType, e.sintEventActionId, e.vchEventDetail, e.dtInserted,
	--p.vchForeName as foreName, p.vchSurname as surName, 
	Coalesce(NULLIF(p.vchForename, ''), '') + Coalesce(' ' + NULLIF(p.vchSurname, ''), '') as candidateName, vchSystemEventAction,
	tect.*, Coalesce(NULLIF(tect.vchForename, ''), '') + Coalesce(' ' + NULLIF(tect.vchSurname, ''), '') as toCandidateName,
	tec.*,
	u.vchShortname, coalesce(NULLIF(p1.vchForename, ''), '') + Coalesce(' ' + NULLIF(p1.vchSurname, ''), '') as UserName
from lEventCandidate ec left join dEvent e on ec.intEventId = e.intEventId
				left join dCandidate c on ec.intCandidateId = c.intCandidateId
				left join dPerson p on c.intPersonId = p.intPersonId
				left join sEventAction ea on e.sintEventActionId = ea.tintsystemeventactionId
				left join tempEventCandidateTelecom tect on ec.intEventId = tect.intEventId
				left join tempEventContact tec on ec.intEventId = tec.contactEventId
				left join dUser u on e.intLoggedById = u.intUserId
				left join dPerson p1 on u.intPersonId = p1.intPersonId
-- where tect.telValue like '%@%'-- is not null 
--where e.vchEventDetail &lt;&gt; ''
) --and tect.intContactId = 1484
--where p.intPersonId = 103140--
--select * from tempEventCandidate --where intCompanyTierContactId = 24204
select CandidateId as External_Id, -10 as user_account_Id
		, dtInserted as Insert_TimeStamp, -10 as AssignedUserId, 'comment' as category, 'candidate' as type
		, contactName
		, concat(
				concat('-----MIGRATED FROM EVENTS-----',char(10)),
				iif(sdtEventDate is null, '', concat('Event Date: ',convert(varchar(20),sdtEventDate,120))),
				iif(vchEventDetail = '' or vchEventDetail is null, '', concat(char(10),'Event Details: ',vchEventDetail)),
				iif(vchSystemEventAction = '' or vchSystemEventAction is null, '', concat(char(10),'Event Action: ',vchSystemEventAction)),
				iif(contactName = '' or contactName is null, '', concat(char(10),'Logged Against: ',char(10),'- ',contactName)),
				iif(toCandidateName = '' or toCandidateName is null, '', concat(char(10),'To/From: ',toCandidateName, iif(telValue = '' or telValue is null,'',concat(' (',telValue,')')))),
				iif(UserName = '' or UserName is null, '', concat(char(10),'Logged By: ',UserName)),
				concat(char(10),'Event ID: ', EventId)
				) as Content
from tempEventCandidate --where CandidateId = 49053
</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>96</xloc>
      <yloc>992</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Candidate Comment</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>
with 
-------------------------------------------------------------CALL BACKS
 -- select top 10 * from dCandidateCallBack
 tempCallBack as (
	select cb.intCandidateId, cb.dtInserted, intCandidateCallBackId, cb.vchCallBackDetail, cb.bitActive, cb.datCallBackDate, cbt.vchCallBackTypeName
						, ROW_NUMBER() OVER(PARTITION BY cb.intCandidateId ORDER BY intCandidateCallBackId ASC) AS rn
	from dCandidateCallBack cb 
	left join dCandidate c on cb.intCandidateId = c.intCandidateId
       left join refCallBackType cbt on cb.tintCallBackTypeId = cbt.tintCallBackTypeId
	where cb.bitActive = 1 
	and c.intCandidateId  is not null 
	--and c.intCandidateId = 8588
	)
--select * from  tempCallBack

, tempCallBack1 as (
select intCandidateId, dtInserted,
       STUFF(
                iif(datCallBackDate is NULL,'',concat('Call Back Date: ',datCallBackDate,char(10)))
              + iif(vchCallBackDetail = '' or vchCallBackDetail is NULL,'',concat('Detail: ',vchCallBackDetail,char(10)))
              + iif(vchCallBackTypeName = '' or vchCallBackTypeName is NULL,'',concat('Type: ',vchCallBackTypeName,char(10)))
              --, iif(bitActive = '' or bitActive is NULL,'',concat('  Flag (Active): ',bitActive,char(10)))
              --, concat('Entity: Contact', char(10))
	 ,1,0, '')  AS callBackInfo
from tempCallBack
--where intCandidateId = 8588
)
--select * from tempCallBack1

/*, CandiddateCallBack as (SELECT intCandidateId,
     STUFF(
         (SELECT char(10) + callBackInfo
          from  tempCallBack1
          WHERE intCandidateId =cb1.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          ,1,1, '')  AS callBackInfo
FROM tempCallBack1 as cb1
GROUP BY cb1.intCandidateId)
select * from CandiddateCallBack
*/

-------------------------------------------------------------MAIN SCRIPT
--insert into ImportCandidate
select
         c.intCandidateId as external_Id -- p.intPersonId  as PersonId --just for reference afterward
--       , iif(rtrim(ltrim(p.vchForename)) = '' or rtrim(ltrim(p.vchForename)) is null, 'No Firstname', rtrim(ltrim(p.vchForename))) as 'candidate-firstName'
--       , iif(rtrim(ltrim(p.vchSurName)) = '' or rtrim(ltrim(p.vchSurName)) is null, concat('Lastname-', c.intCandidateId), rtrim(ltrim(p.vchSurName))) as 'candidate-Lastname'
       , cast('-10' as int) as 'user_account_id'
       , 'comment' as 'category'
       , 'candidate' as 'type'
       , ccb.dtInserted as 'insert_timestamp'       
       , ccb.CallBackInfo as 'content'
-- select count(*) --22568-- select distinct rn.vchNationalityName
from dCandidate c
left join dPerson p on c.intPersonId = p.intPersonId
left join tempCallBack1 ccb on c.intCandidateId = ccb.intCandidateId
where ccb.CallBackInfo &lt;&gt; ''

</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>96</xloc>
      <yloc>912</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Candidate Document</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>select intCandidateId as 'external_id', dtInserted, concat('CV',intCandidateCVId,'_',convert(date,dtInserted),
 coalesce('_' + NULLIF(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace
 (vchCVName,'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),''),''), vchFileType) as file_name,
 iif(right(vchCVName,4)=vchFileType or right(vchCVName,5)=vchFileType,concat('_',replace(vchCVName,'/','.')),
 iif(vchFileType= '.', concat('_',vchCVName,'.docx'),concat('_',replace(vchCVName,'/','.'),vchFileType))) as CVFullName
,'resume' as 'document_type','CANDIDATE' as 'entity_type'
from dCandidateCV





</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>1008</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Candidate Skills</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>select a.intCandidateId
,string_agg(b.vchAttributeName,', ') as skill
from lAttributeCandidate a left join refAttribute b on a.intAttributeId = b.intAttributeId
group by a.intcandidateId



</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>1536</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Candidate look up</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>external_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>external_id</field>
        <condition>IS NOT NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>candidate_id</rename>
        <default/>
        <type>String</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>192</xloc>
      <yloc>912</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Car Custom Field</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>--Sector
select 'add_can_info' as 'Additional_type',
intCandidateId as 'External_id',
iif(cast(bitTransport as int) = 1,'Yes','') as 'CustomValue',
'Car' as 'lookup_name',
getdate() as insert_timestamp
from dCandidate
</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>208</xloc>
      <yloc>1520</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Company Activities</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>--select distinct intEventId from lEventCompany
--select * from lEventCompanyTier
--select * from lEventCompanyTelecom
--select * from dCompanyTelecom
with tempCompEvent as (
select ec.intEventId, ct.intCompanyId
from lEventCompanyTier ec left join dCompanyTier ct on ec.intCompanyTierId = ct.intCompanyTierId
union 
select intEventId, intCompanyId
from lEventCompany)

-------There are only 12 records in lEventCompanyTelecom so we can skip this data
, tempEventContact as (select ectc.intEventId contactEventId, --ectc.intCompanyTierId, ectc.intContactId as ContactId, 
	--ctc.intCompanyTierContactId,
	ct.vchCompanyTierName,
	--p.vchForeName as contactForeName, p.vchSurname as contactSurName, 
	coalesce(NULLIF(p.vchForename, ''), '') + Coalesce(' ' + NULLIF(p.vchSurname, ''), '') as contactName
from lEventCompanyTierContact ectc left join dEvent e on ectc.intEventId = e.intEventId
				left join dContact c on ectc.intContactId = c.intContactId
				left join dPerson p on c.intPersonId = p.intPersonId
				left join lCompanyTierContact ctc on ectc.intContactId = ctc.intContactId and ectc.intCompanyTierId = ctc.intCompanyTierId
				left join dCompanyTier ct on ectc.intCompanyTierId = ct.intCompanyTierId)

, tempEventCompany as (
select ec.intEventId as EventId, ec.intCompanyId as CompanyId, 
	c.vchCompanyName,
	e.sdtEventDate, e.intLoggedById, e.tintDirection, e.bitAutoEvent, e.tintEventType, e.sintEventActionId, e.vchEventDetail, e.dtInserted,
	ea.vchSystemEventAction,
	tec.*,
	u.vchShortname, coalesce(NULLIF(p1.vchForename, ''), '') + Coalesce(' ' + NULLIF(p1.vchSurname, ''), '') as UserName
from tempCompEvent ec left join dEvent e on ec.intEventId = e.intEventId
				left join dCompany c on ec.intCompanyId = c.intCompanyId
				left join sEventAction ea on e.sintEventActionId = ea.tintsystemeventactionId
				left join tempEventContact tec on ec.intEventId = tec.contactEventId
				left join dUser u on e.intLoggedById = u.intUserId
				left join dPerson p1 on u.intPersonId = p1.intPersonId
-- where tect.telValue like '%@%'-- is not null 
--where e.vchEventDetail &lt;&gt; ''
) --and tect.intContactId = 1484
--where p.intPersonId = 103140--
--select * from tempEventCandidate --where intCompanyTierContactId = 24204
select CompanyId as External_Id, -10 as user_account_id
		, dtInserted as Insert_TimeStamp, -10 as AssignedUserId, 'comment' as category, 'company' as type
		, contactName, EventId
		, concat(
				iif(sdtEventDate is null, '', concat('Event Date: ',convert(varchar(20),sdtEventDate,120))),
				iif(vchEventDetail = '' or vchEventDetail is null, '', concat(char(10),'Event Details: ',vchEventDetail)),
				iif(vchSystemEventAction = '' or vchSystemEventAction is null, '', concat(char(10),'Event Action: ',vchSystemEventAction)),
				iif(contactName = '' or contactName is null, '', concat(char(10),'Logged Against: ',char(10),'- ',contactName)),
				iif(UserName = '' or UserName is null, '', concat(char(10),'Logged By: ',UserName)),
				concat(char(10),'Event ID: ', EventId)
				) as Content
from tempEventCompany


</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>656</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Contact 2</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>with tempEventContactTelecom as (select ectct.intEventId, ctct.intContactId , p.vchForename, p.vchSurname, ctct.vchDescription, ctct.vchValue, ctct.vchExtension
from lEventCompanyTierContactTelecom ectct left join dCompanyTierContactTelecom ctct on ectct.intCompanyTierContactTelecomId = ctct.intCompanyTierContactTelecomId
				left join dContact c on ctct.intContactId = c.intContactId
				left join dPerson p on c.intPersonId = p.intPersonId)
-------aboew table has some event using 2 telecom type
, tempEventContact as (select ectc.intEventId as EventId, ectc.intCompanyTierId, ectc.intContactId as ContactId, 
	ctc.intCompanyTierContactId, ct.intCompanyId,
	e.sdtEventDate, e.intLoggedById, e.tintDirection, e.bitAutoEvent, e.tintEventType, e.sintEventActionId, e.vchEventDetail, e.dtInserted,
	ct.vchCompanyTierName,
	p.vchForeName as foreName, p.vchSurname as surName, 
	coalesce(NULLIF(p.vchForename, ''), '') + Coalesce(' ' + NULLIF(p.vchSurname, ''), '') as contactName, vchSystemEventAction,
	tect.*, Coalesce(NULLIF(tect.vchForename, ''), '') + Coalesce(' ' + NULLIF(tect.vchSurname, ''), '') as toContactName,
	u.vchShortname, coalesce(NULLIF(p1.vchForename, ''), '') + Coalesce(' ' + NULLIF(p1.vchSurname, ''), '') as UserName
from lEventCompanyTierContact ectc left join dEvent e on ectc.intEventId = e.intEventId
				left join dContact c on ectc.intContactId = c.intContactId
				left join dPerson p on c.intPersonId = p.intPersonId
				left join lCompanyTierContact ctc on ectc.intContactId = ctc.intContactId and ectc.intCompanyTierId = ctc.intCompanyTierId
				left join dCompanyTier ct on ectc.intCompanyTierId = ct.intCompanyTierId
				left join sEventAction ea on e.sintEventActionId = ea.tintsystemeventactionId
				left join tempEventContactTelecom tect on ectc.intEventId = tect.intEventId
				left join dUser u on e.intLoggedById = u.intUserId
				left join dPerson p1 on u.intPersonId = p1.intPersonId
--where tect.vchValue is not null 
) --and tect.intContactId = 1484
--where p.intPersonId = 103140--
--select *  from tempEventContact where UserName like 'Jame%'--intCompanyTierContactId = 24204
select intCompanyTierContactId as External_Id,EventId, -10 as user_account_Id
		, dtInserted as Insert_TimeStamp, -10 as AssignedUserId, 'comment' as category, 'contact' as type
		--, ROW_NUMBER() OVER(PARTITION BY EventId ORDER BY intCompanyTierContactId ASC) AS rn
		, REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( 
                                        REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( 
                                        REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( 
                                        REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( 
                                        REPLACE( REPLACE( REPLACE( REPLACE( REPLACE( 
                                        REPLACE( REPLACE( REPLACE( REPLACE( 
				concat(
				iif(sdtEventDate is null, '', concat('Event Date: ',convert(varchar(20),sdtEventDate,120))),
				iif(vchEventDetail = '' or vchEventDetail is null, '', concat(char(10),'Event Details: ',vchEventDetail)),
				iif(vchSystemEventAction = '' or vchSystemEventAction is null, '', concat(char(10),'Event Action: ',vchSystemEventAction)),
				iif(contactName = '' or contactName is null, '', concat(char(10),'Logged Against: ',contactName, iif(vchCompanyTierName = '','',concat(' (',vchCompanyTierName,')')))),
				iif(toContactName = '' or toContactName is null, '', concat(char(10),'To/From: ',toContactName, iif(vchValue = '' or vchValue is null,'',concat(' (',vchValue,')')))),
				iif(UserName = '' or UserName is null, '', concat(char(10),'Logged By: ',UserName)),
				concat(char(10),'Event ID: ', EventId) ) 
		,char(0x0000),'') ,char(0x0001),'') ,char(0x0002),'') ,char(0x0003),'') ,char(0x0004),'') 
                                        ,char(0x0005),'') ,char(0x0006),'') ,char(0x0007),'') ,char(0x0008),'') ,char(0x000B),'') 
                                        ,char(0x000C),'') ,char(0x000E),'') ,char(0x000F),'') ,char(0x0010),'') ,char(0x0011),'') 
                                        ,char(0x0012),'') ,char(0x0013),'') ,char(0x0014),'') ,char(0x0015),'') ,char(0x0016),'') 
                                        ,char(0x0017),'') ,char(0x0018),'') ,char(0x0019),'') ,char(0x001A),'') ,char(0x001B),'') 
                                        ,char(0x001C),'') ,char(0x001D),'') ,char(0x001E),'') ,char(0x001F),'') as Content
from tempEventContact</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>128</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Contact Activities 1</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>--line manager, job type, start date, end date, salary currency, note
--
with tempContacts as (select c.intContactId, c.intPersonId, intCompanyTierContactId, ctc.intCompanyTierId, ct.intCompanyId, ctc.vchJobTitle, c.datLastContacted
		, ctc.vchNote, ctc.bitActive, ctc.intPreferredTelecomId, ROW_NUMBER() OVER(PARTITION BY ctc.intContactId ORDER BY intCompanyId ASC) AS rn
from dContact c left join lCompanyTierContact ctc on c.intContactId = ctc.intContactId
				left join dCompanyTier ct on ctc.intCompanyTierId = ct.intCompanyTierId
where ctc.intContactId is not null)

, tempWorkHistory as (select  wh.*, rc.vchCurrencyName, vchCurrencyDesc, ROW_NUMBER() OVER(PARTITION BY wh.intPersonId ORDER BY intWorkHistoryId ASC) AS rn
from dWorkHistory wh left join refCurrency rc on wh.tintSalaryCurrencyId = rc.tintCurrencyId)

, tempWorkHistory1 as (select intPersonId, 
		concat(iif(intWorkHistoryId is NULL,'',concat('-----Employer ',rn,': ',vchCompanyName,char(10)))
			, iif(vchCompanyTierName = '' or vchCompanyTierName is NULL,'',concat('Company Tier Name: ',vchCompanyTierName,char(10)))
			, iif(vchLineManager = '' or vchLineManager is NULL,'',concat('Line Manager: ',vchLineManager,char(10)))
			, iif(vchJobTitle = '' or vchJobTitle is NULL,'',concat('Job Title: ',vchJobTitle,char(10)))
			, case
				 when tintJobType = 1 then concat('Job Type: Permanent (1)',char(10))
				 when tintJobType = 2 then concat('Job Type: Contract (2)',char(10))
				 when tintJobType = 3 then concat('Job Type: Contract (3)',char(10))
				 else concat('Job Type: Permanent (0)',char(10)) end
			--, iif(tintJobType = '' or tintJobType is NULL,'',concat('Job Type (ID): ',tintJobType,char(10)))
			, iif(datStartDate is NULL,'',concat('Start Date: ',datStartDate,char(10)))
			, iif(datEndDate is NULL,'',concat('End Date: ',datEndDate,char(10)))
			, iif(vchCurrencyDesc = '' or vchCurrencyDesc is NULL,'',concat('Currency: ',vchCurrencyDesc,char(10)))
			, iif(vchNote = '' or vchNote is NULL,'',concat('Notes: ', char(10), vchNote,char(10)))
			) as WorkHistory
	, rn
from tempWorkHistory)

, combinedWorkHistory as (SELECT intPersonId, 
     STUFF(
         (SELECT char(10) + WorkHistory
          from  tempWorkHistory1
          WHERE intPersonId =twh.intPersonId
    order by intPersonId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          ,1,1, '')  AS WorkHistory
FROM tempWorkHistory1 as twh
GROUP BY twh.intPersonId)
--select count(*) from combinedWorkHistory
--select top 100* from combinedWorkHistory
, temp as (select tc.intCompanyTierContactId, tc.intContactId, cwh.*
from tempContacts tc left join combinedWorkHistory cwh on tc.intPersonId = cwh.intPersonId
where cwh.intPersonId is not null)-- and tc.intCompanyId in (2,455))

--select * from temp-- where WorkHistory is not null top 100*

select intCompanyTierContactId as External_Id, -10 as user_account_Id
		, CURRENT_TIMESTAMP as Insert_TimeStamp, -10 as AssignedUserId, 'comment' as category, 'contact' as type
		, concat('-----MIGRATED FROM WORK HISTORY-----',char(10),WorkHistory) as Content
		from temp --where intCompanyTierContactId = 15111
--select * from tempWorkHistory1</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>128</xloc>
      <yloc>1280</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>DOB</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>with candidateAllEmails as (select ct.intCandidateTelecomId, ct.intCandidateId, vchValue as 'original-email'
							, case 
								when CHARINDEX(',',vchValue) = 1 then replace(vchValue,',','')
								when CHARINDEX(',',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(',',vchValue)-1)
								when CHARINDEX('/',vchValue) = 1 then replace(vchValue,'/','')
								when CHARINDEX('/',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX('/',vchValue)-1)
								when CHARINDEX(';',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(';',vchValue)-1)
								when CHARINDEX('-',vchValue) = 1 then right(vchValue,len(vchValue)-1)
								else vchValue end as email
							, vchForename, vchMiddlename, vchSurname, vchDescription,
		ROW_NUMBER() OVER(PARTITION BY ct.intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom  ct left join dCandidate c on ct.intCandidateId = c.intCandidateId
						left join dPerson p on c.intPersonId = p.intPersonId
where vchValue like '%_@_%.__%')

, Email_EditFormat as (
SELECT intCandidateId, vchDescription
	 , ltrim(rtrim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(email,'''',''),'$',''),':',''),'?',''),'~',''),' ',''),'|',''),'[',''),']',''),'mailto',''))) as email
from candidateAllEmails
where  CHARINDEX(',',email) = 0 and CHARINDEX('/',email) = 0 and rn =1)

, EmailDupRegconition as (
SELECT intCandidateId, vchDescription, email, ROW_NUMBER() OVER(PARTITION BY email ORDER BY intCandidateId ASC) AS rn 
from Email_EditFormat)


, CandidateMainEmail as (select intCandidateId
, case	when rn = 1 then email
		else concat(rn,'_',email) end as CandidateEmail
, rn
from EmailDupRegconition)

--------------------------------------CANDIDATE RESUMES
, CVName as (
select intCandidateId, dtInserted, concat('CV',intCandidateCVId,'_',convert(date,dtInserted),
 --coalesce('_' + NULLIF(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(vchCVName,'?',''),' ',''),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),''),''), vchFileType)
 iif(right(vchCVName,4)=vchFileType or right(vchCVName,5)=vchFileType,concat('_',replace(vchCVName,'/','.')),iif(vchFileType= '.', concat('_',vchCVName,'.docx'),concat('_',replace(vchCVName,'/','.'),vchFileType)))) as CVFullName
from dCandidateCV)
, CanResumes as (select intCandidateId, STUFF(
					(Select ',' + replace(replace(CVFullName,' ','_'),'%','_')
					from CVName 
					where intCandidateId = cvn.intCandidateId
    order by intCandidateId asc, dtInserted desc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'CVName'
FROM CVName as cvn
GROUP BY cvn.intCandidateId)

--, tempCanAttachment as(
--SELECT intCandidateId, ac.intAttachmentId--, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY ac.intAttachmentId ASC) AS rn
--		,case when vchFileType like '.eml' then e.msgfilename 
--		else
--		 concat(ac.intAttachmentId,'_', 
--		 iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_')
--		 , concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'), vchFileType)))
--		 end as attachmentName
--from lAttachmentCandidate ac left join dAttachment a on ac.intAttachmentId = a.intAttachmentId
--							 left join email e on a.intAttachmentId = e.AttachmentID
--where vchFileType not in ('.mp4')
--union  --union with email files got from candidate events
--select ec.intCandidateId, ae.intAttachmentId, em.msgfilename as attachmentName--, a.vchAttachmentName
--from lEventCandidate ec left join dEvent e on ec.intEventId = e.intEventId
--				--left join dCandidate c on ec.intCandidateId = c.intCandidateId
--				left join lAttachmentEvent ae on ec.intEventId = ae.intEventId
--				left join dAttachment a on ae.intAttachmentId = a.intAttachmentId
--				left join email em on ae.intAttachmentId = em.AttachmentID
--where em.AttachmentID is not null)

--, canAttachment as (SELECT intCandidateId, 
--     STUFF(
--         (SELECT ',' + replace(attachmentName,'%','_')
--          from  tempCanAttachment
--          WHERE intCandidateId =ca.intCandidateId
--    order by intCandidateId asc
--          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
--          ,1,1, '')  AS canAttachments
--FROM tempCanAttachment as ca
--GROUP BY ca.intCandidateId)

--, tempCanDocuments as (select * from CanResumes union all select * from canAttachment)
----select * from tempCanDocuments
----select * from tempCan where ApplicantId = 142
--, CanDocuments as (select intCandidateId, STUFF(
--					(Select ',' + CVName
--					from tempCanDocuments 
--					where intCandidateId = tcd.intCandidateId
--    order by intCandidateId asc
--          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
--          , 1, 1, '')  AS 'CanDocs'
--FROM tempCanDocuments as tcd
--GROUP BY tcd.intCandidateId)

------------------------------Candidate consultants as owners
, temp_Consultant as (select intcandidateId, u.vchEmail as canOwner
from lConsultantCandidate cc 
		left join dUser u on cc.intConsultantId = u.intUserId)
, CanOwners as (select intCandidateId, STUFF(
					(Select ',' + canOwner
					from temp_Consultant 
					where intCandidateId = tc.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'canOwners'
FROM temp_Consultant as tc
GROUP BY tc.intCandidateId)

, temp_homePhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 1)

, CanHomePhone as (select intCandidateId, vchValue from temp_homePhone where rn = 1)

----------------------------------Candidate Mobile
, temp_Mobile as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 5 and vchValue not like '%@%')

--Get all mobile to put to Notes
, temp_allMobile as (select intCandidateId, STUFF(
					(Select '; ' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_Mobile 
					where intCandidateId = tm.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'allMobile'
FROM temp_Mobile as tm
GROUP BY tm.intCandidateId)

, CanMobile as (select intCandidateId, vchValue from temp_Mobile where rn =1)

--------------------------------Get Work phone
, temp_WorkPhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 2)

, workPhone as (
select intCandidateId, STUFF(
					(Select '|' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_WorkPhone 
					where intCandidateId = twp.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'vchValue'
FROM temp_WorkPhone as twp
GROUP BY twp.intCandidateId)

----CANDIDATE ADDRESS: 
, tempLocation as (select ca.intCandidateId, ca.tintCandidateAddressTypeId, ca.vchAddressLine1, ca.vchAddressLine2 ,ca.vchAddressLine3
	, ca.vchTown, ca.vchCounty,ca.sintCountryId, rc.vchCountryName, rc.vchCountryCode, ca.vchPostcode, ca.vchDescription
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY tintCandidateAddressTypeId ASC) AS rn
	, Stuff(
			  Coalesce(' ' + NULLIF(ltrim(rtrim(vchAddressLine1)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine2)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine3)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchTown)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchCounty)), ''), '')
			+ Coalesce(', ' + NULLIF(rc.vchCountryName, ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchPostCode)), ''), '')
			, 1, 1, '') as 'fullAddress' 
from dCandidateAddress ca left join refCountry rc on ca.sintCountryId = rc.sintCountryId)

, candidateLocation as (select * from tempLocation where rn=1 and fullAddress is not null)

-------------------------------------------------------------MAIN SCRIPT
--insert into ImportCandidate
,test as (select c.intCandidateId as 'candidate-externalId', p.intPersonId  as PersonId--just for reference afterward
, iif(rtrim(ltrim(p.vchForename)) = '' or rtrim(ltrim(p.vchForename)) is null, concat('NoFirstname-', c.intCandidateId), rtrim(ltrim(p.vchForename))) as 'candidate-firstName'
, iif(rtrim(ltrim(p.vchSurName)) = '' or rtrim(ltrim(p.vchSurName)) is null, concat('NoLastname-', c.intCandidateId), rtrim(ltrim(p.vchSurName))) as 'candidate-Lastname'
, iif(rtrim(ltrim(p.vchMiddlename)) = '' or rtrim(ltrim(p.vchMiddlename)) is null, '', rtrim(ltrim(p.vchMiddlename))) as 'candidate-Middlename'
, iif(cme.CandidateEmail = '' or cme.CandidateEmail is NULL,concat(c.intCandidateId,'@noemail.com'),cme.CandidateEmail) as 'candidate-email'
--, iif(we.workEmail = '' or we.workEmail is NULL,'',we.workEmail) as 'candidate-workEmail'--a lot of email has incorrect format, so if these candidates are skipped importing, remove work email
, cast(iif(p.dDOB is null or p.dDOB = '','',convert(varchar(10),p.dDOB,120)) as datetime) as 'candidate-dob'
, upper(t.vchTitleName) as 'candidate-title'
, case
	when p.tintGenderId = 1 then 'MALE'
	when p.tintGenderId = 2 then 'FEMALE'
	else '' end as 'candidate-gender'
--, replace(coalesce(pp.vchValue, cm.vchValue, hp.vchValue),',','') as 'candidate-phone'
, isnull(replace(cm.vchvalue,',',''),'') as 'candidate-mobile'
, isnull(wp.vchValue,'') as 'candidate-workPhone'
, isnull(hp.vchValue,'') as 'candidate-homephone'
, iif(p.vchLinkedInUrl like '%linkedin%',p.vchLinkedInUrl,'') as 'candidate-linkedin'
--, s.skype as 'candidate-skype'
--, left(c.vchComment,32000) as 'candidate-comments'--no more support importing comment
, isnull(iif(right(cl.fullAddress,1)= ',',left(replace(cl.fullAddress,',,',','),len(cl.fullAddress)-1),replace(cl.fullAddress,',,',',')),'') as 'candidate-address'
, iif(cl.vchTown = '' or cl.vchTown is null, '', cl.vchTown) as 'candidate-city'
, iif(cl.vchCounty = '' or cl.vchCounty is null, '', cl.vchCounty) as 'candidate-state'
, iif(cl.vchPostcode = '' or cl.vchPostcode is null, '', cl.vchPostcode) as 'candidate-zipCode'
, iif(cl.sintCountryId &lt;&gt; 0, cl.vchCountryCode, iif(cl.fullAddress like '%London%' or cl.fullAddress like '%Oxford%' or cl.fullAddress like '%UK%', 'GB', iif(cl.fullAddress like '%New York%' or cl.fullAddress like '%NYC%','US',''))) as 'candidate-Country'
, isnull(co.canOwners,'') as 'candidate-owners'
, case
	when rn.vchNationalityName like '%Afghan%' then 'AF'
	when rn.vchNationalityName like '%Algeri%' then 'DZ'
	when rn.vchNationalityName like '%Africa%' then 'ZA'
	when rn.vchNationalityName like '%Albani%' then 'AL'
	when rn.vchNationalityName like '%America%' then 'US'
	when rn.vchNationalityName like '%Andorr%' then 'AD'
	when rn.vchNationalityName like '%Argentin%' then 'AR'
	when rn.vchNationalityName like '%Austra%' then 'AU'
	when rn.vchNationalityName like '%Austri%' then 'AT'
	when rn.vchNationalityName like '%Belgia%' then 'BE'
	when rn.vchNationalityName like '%Brazil%' then 'BR'
	when rn.vchNationalityName like 'Britis%' then 'GB'
	when rn.vchNationalityName like 'Bucha%' then 'RO'
	when rn.vchNationalityName like '%Bulgari%' then 'BG'
	when rn.vchNationalityName like 'Burmes%' then 'MM'
	when rn.vchNationalityName like 'Cambod%' then 'KH'
	when rn.vchNationalityName like 'Canadi%' then 'CA'
	when rn.vchNationalityName like 'Chines%' then 'CN'
	when rn.vchNationalityName like 'Colombi%' then 'CO'
	when rn.vchNationalityName like 'Costa%' then 'CR'
	when rn.vchNationalityName like '%Cypr%' then 'CY'
	when rn.vchNationalityName like '%Czech%' then 'CZ'
	when rn.vchNationalityName like '%Danish%' then 'DK'
	when rn.vchNationalityName like 'Denmark%' then 'DK'
	when rn.vchNationalityName like '%Dutch%' then 'NL'
	when rn.vchNationalityName like 'East%' then 'ZA'
	when rn.vchNationalityName like '%Egypt%' then 'EG'
	when rn.vchNationalityName like 'Emiria%' then 'AE'
	when rn.vchNationalityName like 'Eritre%' then 'ER'
	when rn.vchNationalityName like 'Estoni%' then 'EE'
	when rn.vchNationalityName like 'Ethiop%' then 'ET'
	when rn.vchNationalityName like 'Europe%' then 'TR'
	when rn.vchNationalityName like 'Fijian%' then 'FJ'
	when rn.vchNationalityName like 'Filipi%' then 'PH'
	when rn.vchNationalityName like 'fili%' then 'PH'
	when rn.vchNationalityName like 'Finnish%' then 'FI'
	when rn.vchNationalityName like 'Flemish%' then 'BE'
	when rn.vchNationalityName like 'French%' then 'FR'
	when rn.vchNationalityName like 'Gabone%' then 'GA'
	when rn.vchNationalityName like 'German%' then 'DE'
	when rn.vchNationalityName like '%Georgi%' then 'GE'
	when rn.vchNationalityName like 'Ghanai%' then 'GH'
	when rn.vchNationalityName like 'Gree%' then 'GR'
	when rn.vchNationalityName like 'Hunga%' then 'HU'
	when rn.vchNationalityName like 'Indian%' then 'IN'
	when rn.vchNationalityName like 'Indone%' then 'ID'
	when rn.vchNationalityName like 'Irania%' then 'IR'
	when rn.vchNationalityName like 'Iraq%' then 'IQ'
	when rn.vchNationalityName like 'Irish%' then 'IE'
	when rn.vchNationalityName like 'Isra%' then 'IL'
	when rn.vchNationalityName like 'Ital%' then 'IT'
	when rn.vchNationalityName like 'Jamaic%' then 'JM'
	when rn.vchNationalityName like 'Japane%' then 'JP'
	when rn.vchNationalityName like 'Keny%' then 'KE'
	when rn.vchNationalityName like 'Leban%' then 'LB'
	when rn.vchNationalityName like 'Lithua%' then 'LT'
	when rn.vchNationalityName like 'Malaga%' then 'MG'
	when rn.vchNationalityName like 'Malays%' then 'MY'
	when rn.vchNationalityName like 'Malt%' then 'MT'
	when rn.vchNationalityName like 'Mauritian%' then 'MU'
	when rn.vchNationalityName like 'Mexi%' then 'MX'
	when rn.vchNationalityName like 'Moroc%' then 'MA'
	when rn.vchNationalityName like 'Namibi%' then 'NA'
	when rn.vchNationalityName like 'New Zea%' then 'NZ'
	when rn.vchNationalityName like 'Nigeri%' then 'NG'
	when rn.vchNationalityName like 'Northern Irish' then 'IE'
	when rn.vchNationalityName like 'Norwe%' then 'NO'
	when rn.vchNationalityName like 'Pakist%' then 'PK'
	when rn.vchNationalityName like 'Philip%' then 'PH'
	when rn.vchNationalityName like 'Phili%' then 'PH'
	when rn.vchNationalityName like 'Polish%' then 'PL'
	when rn.vchNationalityName like 'Portu%' then 'PT'
	when rn.vchNationalityName like 'Romani%' then 'RO'
	when rn.vchNationalityName like 'Russia%' then 'RU'
	when rn.vchNationalityName like 'Senegal%' then 'SN'
	when rn.vchNationalityName like 'Serbia%' then 'RS'
	when rn.vchNationalityName like 'Singap%' then 'SG'
	when rn.vchNationalityName like 'Slovaki%' then 'SK'
	when rn.vchNationalityName like '%South Korea%' then 'KR'
	when rn.vchNationalityName like 'Sri%' then 'LK'
	when rn.vchNationalityName like 'South Africa%' then 'ZA'
	when rn.vchNationalityName like 'Spanish%' then 'ES'
	when rn.vchNationalityName like 'Sri Lanka%' then 'LK'
	when rn.vchNationalityName like 'Sri lanka%' then 'LK'
	when rn.vchNationalityName like 'Swedish%' then 'SE'
	when rn.vchNationalityName like 'Swiss%' then 'CH'
	when rn.vchNationalityName like 'Taiwan%' then 'TW'
	when rn.vchNationalityName like '%Ukrain%' then 'UA'
	when rn.vchNationalityName like 'Thai%' then 'TH'
	when rn.vchNationalityName like 'Trinida%' then 'TT'
	when rn.vchNationalityName like 'Turk%' then 'TR'
	when rn.vchNationalityName like 'Vietna%' then 'VN'
	--when rn.vchNationalityName like 'Yugoslavia%' then 'YU'
	when rn.vchNationalityName like '%UNITED%ARAB%' then 'AE'
	when rn.vchNationalityName like '%UAE%' then 'AE'
	when rn.vchNationalityName like '%U.A.E%' then 'AE'
	when rn.vchNationalityName like '%UNITED%KINGDOM%' then 'GB'
	when rn.vchNationalityName like '%UNITED%STATES%' then 'US'
	when rn.vchNationalityName like '%US%' then 'US'
	when rn.vchNationalityName like '%Zimbab%' then 'ZW'
else '' end as 'candidate-citizenship'
, coalesce(pce.vchExplicitJobTitle,c.vchJobTitle) as 'candidate-jobTitle1'
, isnull(coalesce(pce.vchExplicitCompanyName, pce.vchCompanyName),'') as 'candidate-employer1'
--, cwh.WorkHistory as 'candidate-workHistory'
--, cr.CVName as 'candidate-resumes'
--, iif(len(cd.CanDocs)>32000,'',cd.CanDocs) as 'candidate-resume'
--, catt.canAttributes as 'candidate-skills'
--, ccb.callBackInfo : just for testing
, left(
	concat('Candidate External ID: ',c.intCandidateId
	, concat(char(10), char(10),'Voyager Candidate Code: ',c.vchStandardRefCode)
	,iif(rcs.vchCandidateStatusName = '' or rcs.vchCandidateStatusName is NULL,'',concat(char(10), char(10),'Candidate Custom Status: ',rcs.vchCandidateStatusName))--use this for njf search and njf gtp
	,concat(char(10), char(10),'Actively looking? ', replace(replace(bitActivelyLooking,0,'No'),1,'Yes'))--use this for njf contracts db
	,iif(p.vchKnownAs = '' or p.vchKnownAs is null,'',concat(char(10), char(10),'Known As: ',p.vchKnownAs))
	,iif(rc2.vchCountryName = '' or rc2.vchCountryName is NULL,'',concat(char(10), char(10),'Place Of Birth: ',rc2.vchCountryName))
	--,iif(tahp.allHomePhone = '' or tahp.allHomePhone is NULL,'',concat(char(10), char(10),'Home Phone(s): ',tahp.allHomePhone))
	,iif(tam.allMobile = '' or tam.allMobile is NULL,'',concat(char(10), char(10),'Mobile(s): ', tam.allMobile))
	--,iif(he.homeEmail = '' or he.homeEmail is NULL,'',concat(char(10), char(10),'Home Email(s): ',he.homeEmail))
	--,iif(owe.workEmail = '' or owe.workEmail is NULL,'',concat(char(10), char(10),'Work Email: ',owe.workEmail))
	--,iif(f.fax = '' or f.fax is NULL,'',concat(char(10), char(10),'Fax: ', f.fax))
	--,iif(w.web = '' or w.web is NULL,'',concat(char(10), char(10),'Website: ', w.web))
	,iif(c.vchBasedIn = '' or c.vchBasedIn is NULL,'',concat(char(10), char(10),'Based In: ', c.vchBasedIn))
	--,concat(char(10), char(10),'Relocated Flag: ', c.bitRelocate)delete from importcandidate
	,iif(rms.vchMaritalStatusName = '' or rms.vchMaritalStatusName is NULL,'',concat(char(10), char(10),'Marital Status: ', rms.vchMaritalStatusName))
	--,iif(csrc.sources = '' or csrc.sources is NULL,'',concat(char(10), char(10),'Candidate Source(s): ',csrc.sources))
	,iif(npi.vchNoticePeriodIntervalName = '','',concat(char(10), char(10),'Notice Period Interval: ',npi.vchNoticePeriodIntervalName))
	,iif(c.tintNoticePeriodQuantity = 0,'',concat(char(10), char(10),'Notice Period Quantity: ', c.tintNoticePeriodQuantity))
	--,iif(ccb.CallBackInfo = '' or ccb.CallBackInfo is NULL,'',concat(char(10), char(10),'Call Back Records: ', char(10),ccb.CallBackInfo))
	,iif(c.vchSummary = '' or c.vchSummary is NULL,'',concat(char(10), char(10), 'Summary: ',char(10), c.vchSummary, ''))
	,iif(c.vchComment = '' or c.vchComment is NULL,'',concat(char(10), char(10), 'Comment: ',char(10), c.vchComment, ''))
	),32000) as 'candidate-note'--, vchForename, vchSurname
from dCandidate c
				left join dPerson p on c.intPersonId = p.intPersonId
				left join CandidateMainEmail cme on c.intCandidateId = cme.intCandidateId
				left join refTitle t on p.tintTitleId = t.tintTitleId
				left join candidateLocation cl on c.intCandidateId = cl.intCandidateId
				--left join CandiddateCallBack ccb on c.intCandidateId = ccb.intCandidateId
				--left join CanResumes cr on c.intCandidateId = cr.intCandidateId--select distinct bitActivelyLooking from dcandidate--select * from dcandidatesystemstatus
				--left join localCanDocuments cd on c.intCandidateId = cd.intCandidateId
				--left join Temp_Candidate_WorkHistory cwh on c.intCandidateId = cwh.intCandidateId
				left join CanOwners co on c.intCandidateId = co.intCandidateId
				left join refCandidateStatus rcs on c.tintCustomStatusId = rcs.tintCandidateStatusId--njf contract has no status field
				left join refNationality rn on p.sintNationality1Id =rn.sintNationalityId
				-- left join refCountry rc on p.sintNationality1Id = rc.sintCountryId
				-- left join refCountry rc1 on p.sintNationality4Id = rc1.sintCountryId
				left join refCountry rc2 on p.sintCountryOfOriginId = rc2.sintCountryId
				left join WorkPhone wp on c.intCandidateId = wp.intCandidateId --and wp.rn = 1 --refer from sTelecom--There is only 1 candidate has 2 work phone so combine as 1
				left join CanHomePhone hp on c.intCandidateId = hp.intCandidateId
				--left join temp_allHomePhone tahp on c.intCandidateId = tahp.intCandidateId
				left join CanMobile cm on c.intCandidateId = cm.intCandidateId
				left join temp_allMobile tam on c.intCandidateId = tam.intCandidateId
				--left join tempPreferredPhone pp on c.intCandidateId = pp.intCandidateId
				left join refMaritalStatus rms on p.tintMaritalStatusId = rms.tintMaritalStatusId
				--left join CanSources csrc on c.intCandidateId = csrc.intCandidateId
				left join refNoticePeriodInterval npi on c.tintNoticePeriodIntervalId = npi.tintNoticePeriodIntervalId
				left join dPersonCurrentEmployment pce on p.intPersonId = pce.intPersonId
				--left join CanAttributes catt on c.intCandidateId = catt.intCandidateId
				--left join Skype s on c.intCandidateId = s.intCandidateId
				--left join Fax f on c.intCandidateId = f.intCandidateId
				--left join Web w on c.intCandidateId = w.intCandidateId
				--left join HomeEmail he on c.intCandidateId = he.intCandidateId
				--left join WorkEmail we on c.intCandidateId = we.intCandidateId
				--left join OriginalWorkEmail owe on c.intCandidateId = owe.intCandidateId

				)

				select * from test</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>688</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>company</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>external_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>company_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>256</xloc>
      <yloc>656</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>position_description</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>external_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>job_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>240</xloc>
      <yloc>752</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 2 2 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>external_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>entity_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1088</xloc>
      <yloc>1008</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 26</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>offer_personal_info</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>OfferID</name>
        <field>offer_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>offer_personal_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>560</xloc>
      <yloc>416</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 3</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>contact</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>external_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>contact_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>240</xloc>
      <yloc>1280</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 3 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>configurable_form_language</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>CustomValue</name>
        <field>translate</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>language_code</name>
        <rename>language_code</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>592</xloc>
      <yloc>1520</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 4</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>candidate-externalId</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>candidate_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1136</xloc>
      <yloc>608</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 4 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>configurable_form_field_value</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>language_code</name>
        <field>title_language_code</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>field_value</name>
        <rename>field_value_library</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>720</xloc>
      <yloc>1520</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 5</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>company</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>company-externalId</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>company_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1120</xloc>
      <yloc>864</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 5 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>intCandidateId</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>candidate_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1248</xloc>
      <yloc>1536</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 6</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>intCandidateId</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>candidate_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1232</xloc>
      <yloc>1328</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 7</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>candidate-externalId</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>candidate_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1232</xloc>
      <yloc>1440</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>EML Candidate Activities</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>
with test as (select b.intCandidateID, a.intAttachmentId, a.dtInserted 
from lAttachmentEvent a left join lEventCandidate b on a.intEventId = b.intEventId where b.intCandidateId is not null)
,test2 as (SELECT 
  intAttachmentId
  ,concat(intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), '.zip')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType))) as file_name
  FROM dAttachment)

,test3 as (select a.*,b.file_name from test a left join test2 b on a.intAttachmentID = b.intAttachmentID)


select
         b.intCandidateID as external_id
       , cast('-10' as int) as 'user_account_id'
       , 'comment' as 'category'
       , 'candidate' as 'type'
       , b.dtInserted as 'insert_timestamp'       
       , a.content as 'content'

from msg_content_production a left join test3 b on a.[file] = replace(b.file_name,'.eml','.msg') where intCandidateId is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>96</xloc>
      <yloc>1056</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>EML Contact Activities</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>
with test as (select b.intContactId, a.intAttachmentId, a.dtInserted 
from lAttachmentEvent a left join dEventContactTelecom b on a.intEventId = b.intEventId where b.intContactId is not null)
,test2 as (SELECT 
  intAttachmentId
  ,concat(intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), '.zip')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType))) as file_name
  FROM dAttachment)

,test3 as (select a.*,b.file_name from test a left join test2 b on a.intAttachmentID = b.intAttachmentID)


select
         b.intContactId as external_id
       , cast('-10' as int) as 'user_account_id'
       , 'comment' as 'category'
       , 'contact' as 'type'
       , b.dtInserted as 'insert_timestamp'       
       , a.content as 'content'

from msg_content_production a left join test3 b on a.[file] = replace(b.file_name,'.eml','.msg') where intContactId is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>128</xloc>
      <yloc>1360</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>EML activities 1</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>
with test as (select b.intJobId, a.intAttachmentId, a.dtInserted 
from lAttachmentEvent a left join lEventJob b on a.intEventId = b.intEventId where b.intJobId is not null)
,test2 as (SELECT 
  intAttachmentId
  ,concat(intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), '.zip')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType))) as file_name
  FROM dAttachment)

,test3 as (select a.*,b.file_name from test a left join test2 b on a.intAttachmentID = b.intAttachmentID)


select
         b.intJobId as external_id
       , cast('-10' as int) as 'user_account_id'
       , 'comment' as 'category'
       , 'job' as 'type'
       , b.dtInserted as 'insert_timestamp'       
       , a.content as 'content'

from msg_content_production a left join test3 b on a.[file] = replace(b.file_name,'.eml','.msg') where intJobId is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>816</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>EML candidate activities 2</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>
with test as (select b.intCandidateId, a.intAttachmentId, a.dtInserted 
from lAttachmentEvent a left join dEventCandidateTelecom b on a.intEventId = b.intEventId where b.intCandidateId is not null)
,test2 as (SELECT 
  intAttachmentId
  ,concat(intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), '.zip')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType))) as file_name
  FROM dAttachment)

,test3 as (select a.*,b.file_name from test a left join test2 b on a.intAttachmentID = b.intAttachmentID)


select
         b.intCandidateId as external_id
       , cast('-10' as int) as 'user_account_id'
       , 'comment' as 'category'
       , 'candidate' as 'type'
       , b.dtInserted as 'insert_timestamp'       
       , a.content as 'content'

from msg_content_production a left join test3 b on a.[file] = replace(b.file_name,'.eml','.msg') where intCandidateId is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>224</xloc>
      <yloc>1040</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>EML company activities</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>
with test as (select b.intCompanyId, a.intAttachmentId, a.dtInserted 
from lAttachmentEvent a left join dEventCompanyTelecom b on a.intEventId = b.intEventId where b.intCompanyId is not null)
,test2 as (SELECT 
  intAttachmentId
  ,concat(intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), '.zip')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType))) as file_name
  FROM dAttachment)

,test3 as (select a.*,b.file_name from test a left join test2 b on a.intAttachmentID = b.intAttachmentID)


select
         b.intCompanyId as external_id
       , cast('-10' as int) as 'user_account_id'
       , 'comment' as 'category'
       , 'company' as 'type'
       , b.dtInserted as 'insert_timestamp'       
       , a.content as 'content'

from msg_content_production a left join test3 b on a.[file] = replace(b.file_name,'.eml','.msg') where intCompanyId is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>80</xloc>
      <yloc>592</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>EML to activities 2</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>
with test as (select b.intCompanyId, a.intAttachmentId, a.dtInserted 
from lAttachmentEvent a left join lEventCompany b on a.intEventId = b.intEventId where b.intCompanyId is not null)
,test2 as (SELECT 
  intAttachmentId
  ,concat(intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), '.zip')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType))) as file_name
  FROM dAttachment)

,test3 as (select a.*,b.file_name from test a left join test2 b on a.intAttachmentID = b.intAttachmentID)


select
         b.intCompanyId as external_id
       , cast('-10' as int) as 'user_account_id'
       , 'comment' as 'category'
       , 'company' as 'type'
       , b.dtInserted as 'insert_timestamp'       
       , a.content as 'content'

from msg_content_production a left join test3 b on a.[file] = replace(b.file_name,'.eml','.msg') where intCompanyId is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>192</xloc>
      <yloc>576</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>GDPR</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>with test as (select case when intLawfulBasisLawfulBasisStatusId in (2,10) then 5 --'Consent Details Sent'
when intLawfulBasisLawfulBasisStatusId = 5 then 5 --'Accepted'
when intLawfulBasisLawfulBasisStatusId = 14 then 1 ----'Legitimate Interest Details Sent'
end as 'consent', intCandidateId, datExpiry, intLawfulBasisLawfulBasisStatusId
from dCandidatePrivacy where intLawfulBasisLawfulBasisStatusId in (2,5,10,14)
)


select *
,getdate() as date 
,-10 as obtained_by
,case when intLawfulBasisLawfulBasisStatusId = 14 then 1
when intLawfulBasisLawfulBasisStatusId in (2,10) then 1
when intLawfulBasisLawfulBasisStatusId = 5 then 1
end as exciplit_consent 

,case when intLawfulBasisLawfulBasisStatusId = 14 then 3
when intLawfulBasisLawfulBasisStatusId in (2,10) then 2
when intLawfulBasisLawfulBasisStatusId = 5 then 3
end as exercise_right

,case when intLawfulBasisLawfulBasisStatusId = 14 then 1
when intLawfulBasisLawfulBasisStatusId in (2,10) then 3
when intLawfulBasisLawfulBasisStatusId = 5 then 5
end as requestThrough

,case when intLawfulBasisLawfulBasisStatusId = 14 then 6
when intLawfulBasisLawfulBasisStatusId in (2,10) then 3
when intLawfulBasisLawfulBasisStatusId = 5 then 5
end as obtainedThrough

,case when intLawfulBasisLawfulBasisStatusId = 14 then 1
end as gdpr_expire
from test</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1120</xloc>
      <yloc>1328</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Insert / Update invoice</name>
    <type>InsertUpdate</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <commit>1000</commit>
    <update_bypassed>N</update_bypassed>
    <lookup>
      <schema>public</schema>
      <table>invoice</table>
      <key>
        <name>OfferID</name>
        <field>offer_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name>AppID</name>
        <field>position_candidate_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name>offer_valid</name>
        <field>valid</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>offer_id</name>
        <rename>OfferID</rename>
        <update>N</update>
      </value>
      <value>
        <name>position_candidate_id</name>
        <rename>AppID</rename>
        <update>N</update>
      </value>
      <value>
        <name>renewal_flow_status</name>
        <rename>invoice_renewal_flow_status</rename>
        <update>Y</update>
      </value>
      <value>
        <name>renewal_index</name>
        <rename>invoice_renewal_index</rename>
        <update>Y</update>
      </value>
      <value>
        <name>status</name>
        <rename>invoice_status</rename>
        <update>Y</update>
      </value>
      <value>
        <name>valid</name>
        <rename>invoice_valid</rename>
        <update>Y</update>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>464</xloc>
      <yloc>448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Insert / Update offer_personal_info</name>
    <type>InsertUpdate</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <commit>1000</commit>
    <update_bypassed>N</update_bypassed>
    <lookup>
      <schema/>
      <table>offer_personal_info</table>
      <key>
        <name>OfferID</name>
        <field>offer_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>offer_id</name>
        <rename>OfferID</rename>
        <update>N</update>
      </value>
      <value>
        <name>email</name>
        <rename>CanEmail</rename>
        <update>Y</update>
      </value>
      <value>
        <name>first_name</name>
        <rename>CanFName</rename>
        <update>Y</update>
      </value>
      <value>
        <name>last_name</name>
        <rename>CanLName</rename>
        <update>Y</update>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>656</xloc>
      <yloc>256</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table input</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <sql>select id,insert_timestamp,company_id from activity where company_id is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>512</xloc>
      <yloc>656</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table input 4 2</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <sql>select id,insert_timestamp,contact_id from activity where contact_id is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>1280</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>content</column_name>
        <stream_name>content</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>category</column_name>
        <stream_name>category</stream_name>
      </field>
      <field>
        <column_name>type</column_name>
        <stream_name>type</stream_name>
      </field>
      <field>
        <column_name>user_account_id</column_name>
        <stream_name>user_account_id</stream_name>
      </field>
      <field>
        <column_name>company_id</column_name>
        <stream_name>company_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>384</xloc>
      <yloc>656</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 2</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity_company</table>
    <commit>1000</commit>
    <truncate>Y</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>activity_id</column_name>
        <stream_name>id</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>company_id</column_name>
        <stream_name>company_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>640</xloc>
      <yloc>656</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 2 2</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity_job</table>
    <commit>1000</commit>
    <truncate>Y</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>activity_id</column_name>
        <stream_name>id</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>job_id</column_name>
        <stream_name>position_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>592</xloc>
      <yloc>752</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 2 3</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity_candidate</table>
    <commit>1000</commit>
    <truncate>Y</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>activity_id</column_name>
        <stream_name>id</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>candidate_id</column_name>
        <stream_name>candidate_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>912</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 3</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>Content</column_name>
        <stream_name>Content</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>category</column_name>
        <stream_name>category</stream_name>
      </field>
      <field>
        <column_name>type</column_name>
        <stream_name>type</stream_name>
      </field>
      <field>
        <column_name>user_account_id</column_name>
        <stream_name>user_account_id</stream_name>
      </field>
      <field>
        <column_name>position_id</column_name>
        <stream_name>job_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>752</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 4</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>candidate_gdpr_compliance</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>portal_status</column_name>
        <stream_name>consent</stream_name>
      </field>
      <field>
        <column_name>expire_date</column_name>
        <stream_name>datExpiry</stream_name>
      </field>
      <field>
        <column_name>request_through_date</column_name>
        <stream_name>date</stream_name>
      </field>
      <field>
        <column_name>obtained_by</column_name>
        <stream_name>obtained_by</stream_name>
      </field>
      <field>
        <column_name>explicit_consent</column_name>
        <stream_name>exciplit_consent</stream_name>
      </field>
      <field>
        <column_name>exercise_right</column_name>
        <stream_name>exercise_right</stream_name>
      </field>
      <field>
        <column_name>request_through</column_name>
        <stream_name>requestThrough</stream_name>
      </field>
      <field>
        <column_name>obtained_through</column_name>
        <stream_name>obtainedThrough</stream_name>
      </field>
      <field>
        <column_name>expire</column_name>
        <stream_name>gdpr_expire</stream_name>
      </field>
      <field>
        <column_name>candidate_id</column_name>
        <stream_name>candidate_id</stream_name>
      </field>
      <field>
        <column_name>obtained_through_date</column_name>
        <stream_name>date</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>date</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>1328</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 5</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>content</column_name>
        <stream_name>Content</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>category</column_name>
        <stream_name>category</stream_name>
      </field>
      <field>
        <column_name>type</column_name>
        <stream_name>type</stream_name>
      </field>
      <field>
        <column_name>user_account_id</column_name>
        <stream_name>user_account_id</stream_name>
      </field>
      <field>
        <column_name>contact_id</column_name>
        <stream_name>contact_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>352</xloc>
      <yloc>1280</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 6</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity_contact</table>
    <commit>1000</commit>
    <truncate>Y</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>activity_id</column_name>
        <stream_name>id</stream_name>
      </field>
      <field>
        <column_name>contact_id</column_name>
        <stream_name>contact_id</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>624</xloc>
      <yloc>1280</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 8 2</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>bulk_upload_document_mapping</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>entity_type</column_name>
        <stream_name>entity_type</stream_name>
      </field>
      <field>
        <column_name>file_name</column_name>
        <stream_name>file_name</stream_name>
      </field>
      <field>
        <column_name>document_type</column_name>
        <stream_name>document_type</stream_name>
      </field>
      <field>
        <column_name>entity_id</column_name>
        <stream_name>entity_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1216</xloc>
      <yloc>1008</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema/>
      <table>candidate</table>
      <key>
        <name>candidate_id</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>facebook</name>
        <rename>candidate-Facebook</rename>
      </value>
      <value>
        <name>linked_in_profile</name>
        <rename>candidate-linkedin</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1312</xloc>
      <yloc>608</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update 2</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema/>
      <table>candidate</table>
      <key>
        <name>candidate_id</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>date_of_birth</name>
        <rename>candidate-dob</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1312</xloc>
      <yloc>688</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update 2 2</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema/>
      <table>candidate</table>
      <key>
        <name>candidate_id</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>nationality</name>
        <rename>candidate-citizenship</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1312</xloc>
      <yloc>768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update 3</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema/>
      <table>company_location</table>
      <key>
        <name>company_id</name>
        <field>company_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>address</name>
        <rename>company-address</rename>
      </value>
      <value>
        <name>location_name</name>
        <rename>company-address</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1296</xloc>
      <yloc>864</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update 4</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema/>
      <table>candidate</table>
      <key>
        <name>candidate_id</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>note</name>
        <rename>note_final</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1376</xloc>
      <yloc>1440</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update 4 2</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema/>
      <table>candidate</table>
      <key>
        <name>candidate_id</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>skills</name>
        <rename>skill</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1424</xloc>
      <yloc>1536</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update JobApp status 2</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection/>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema>public</schema>
      <table>position_candidate</table>
      <key>
        <name>AppID</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>status</name>
        <rename>position_candidate_status</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>400</xloc>
      <yloc>96</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Update offer</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema>public</schema>
      <table>offer</table>
      <key>
        <name>OfferID</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name>offer_valid</name>
        <field>valid</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>draft_offer</name>
        <rename>offer_draft_offer</rename>
      </value>
      <value>
        <name>position_type</name>
        <rename>offer_position_type</rename>
      </value>
      <value>
        <name>valid</name>
        <rename>offer_valid</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>640</xloc>
      <yloc>160</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>VC Can Lookup 3 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema>public</schema>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name/>
        <field>external_id</field>
        <condition>IS NOT NULL</condition>
        <name2/>
      </key>
      <key>
        <name>application-candidateExternalId</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>CanID</rename>
        <default/>
        <type>None</type>
      </value>
      <value>
        <name>first_name</name>
        <rename>CanFName</rename>
        <default/>
        <type>None</type>
      </value>
      <value>
        <name>last_name</name>
        <rename>CanLName</rename>
        <default/>
        <type>None</type>
      </value>
      <value>
        <name>email</name>
        <rename>CanEmail</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>336</xloc>
      <yloc>320</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>VC Job Lookup 3 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema>public</schema>
      <table>position_description</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name/>
        <field>external_id</field>
        <condition>IS NOT NULL</condition>
        <name2/>
      </key>
      <key>
        <name>application-positionExternalId</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>JobID</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>336</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>VC JobApp Lookup 2 2</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema>public</schema>
      <table>position_candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>JobID</name>
        <field>position_description_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name>CanID</name>
        <field>candidate_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>AppID</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>464</xloc>
      <yloc>224</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>VC Offer Lookup</name>
    <type>DBLookup</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema>public</schema>
      <table>offer</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>AppID</name>
        <field>position_candidate_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name>offer_valid</name>
        <field>valid</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>OfferID</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>464</xloc>
      <yloc>320</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>candidate ID lookup</name>
    <type>DBLookup</type>
    <description/>
    <distribute>N</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>candidate</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>External_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>candidate_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>1520</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>candidate input</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <sql>select id,insert_timestamp,candidate_id from activity where candidate_id is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>416</xloc>
      <yloc>912</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>candidate photo</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>

with test as (select * from lAttachmentCandidate where intAttachmentId in (select intAttachmentId From dAttachment where vchFileType in ('.jpeg','.jpg','png')))


select a.intCandidateId as external_id, a.dtInserted,
concat(b.intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType)))	
as file_name 
,'resume' as 'document_type','CANDIDATE' as 'entity_type'
from test a left join dAttachment b on a.intAttachmentId = b.intAttachmentId






</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>944</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>candidate_activity</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>activity</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>content</column_name>
        <stream_name>content</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>category</column_name>
        <stream_name>category</stream_name>
      </field>
      <field>
        <column_name>type</column_name>
        <stream_name>type</stream_name>
      </field>
      <field>
        <column_name>user_account_id</column_name>
        <stream_name>user_account_id</stream_name>
      </field>
      <field>
        <column_name>candidate_id</column_name>
        <stream_name>candidate_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>304</xloc>
      <yloc>912</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>company address fix</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>with compSwitchboard as(
select intCompanyId, vchValue, replace(iif(vchExtension &lt;&gt; '', concat(vchNumber,vchExtension), vchNumber), char(0x0003),'') as switchBoard
, ROW_NUMBER() OVER(PARTITION BY intCompanyId ORDER BY vchValue ASC) AS rn
from dCompanyTelecom 
where vchDescription = 'switchboard' or (tintTelecomId  = 4 and vchDescription &lt;&gt; 'Tel' and vchValue &lt;&gt; ''))

, tphone1 as (select intCompanyId, vchValue, replace(iif(vchExtension &lt;&gt; '', concat(vchNumber,vchExtension), vchNumber), char(0x0003),'') as vchNumber
from dCompanyTelecom where vchDescription = 'Tel' or vchDescription = 'JK''s Number')

, tphone2 as (select ct.intCompanyId, vchValue, iif(vchExtension &lt;&gt; '', concat(vchNumber,vchExtension, ' (',ct.vchCompanyTierName, ')'), concat(vchNumber, ' (', ct.vchCompanyTierName, ')')) as vchNumber --ctt.intCompanyTierId, intCompanyTierTelecomId
				,  ROW_NUMBER() OVER(PARTITION BY intCompanyId ORDER BY vchNumber ASC) AS rn
from dCompanyTierTelecom ctt left join dCompanyTier ct on ctt.intCompanyTierId = ct.intCompanyTierId
where vchNumber is not null and vchNumber &lt;&gt; '' and (ctt.vchDescription = 'Location Tel No' or ctt.vchDescription = '')  and (ct.vchCompanyTierName = 'Main' or ct.vchCompanyTierName = 'Head Office'))

, mainTierPhone as (SELECT intCompanyId, 
     STUFF(
         (SELECT ',' + vchNumber
          from  tphone2
          WHERE intCompanyId = T.intCompanyId
    order by intCompanyId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS vchNumber
FROM tphone2 as T
GROUP BY T.intCompanyId)

, Phone as (select a.intCompanyId, coalesce(t1.vchNumber, mtp.vchNumber) as Num
from dCompany a left join tphone1 t1 on a.intCompanyId = t1.intCompanyId
left join mainTierPhone mtp on a.intCompanyId = mtp.intCompanyId)

, web as (select intCompanyId,
	case when left(vchValue,2) = '//' then right(vchValue,len(vchValue)-2)
		 when left(vchValue,1) = '/' then right(vchValue,len(vchValue)-1)
	else vchValue end as web--, ROW_NUMBER() OVER(PARTITION BY intCompanyId ORDER BY intCompanyTelecomId ASC) AS rn
from dCompanyTelecom
where vchValue &lt;&gt; ''and vchValue not like '%@%'  and (vchValue like '%.co%' or vchValue like '%www%'))

, dup as (select intCompanyId, vchCompanyName, ROW_NUMBER() OVER(PARTITION BY vchCompanyName ORDER BY intCompanyId ASC) AS rn
from dCompany)


, tempConsultant as (select ca.intConsultantId, ca.intCompanyId, u.vchEmail
from lconsultantCompany ca left join dUser u on ca.intConsultantId = u.intUserId)

, CompOwner as (select intCompanyId,
		STUFF(
			(SELECT ',' + vchEmail
			 from  tempConsultant
			 WHERE intCompanyId =ta.intCompanyId
			 order by intCompanyId asc
			 FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
			  ,1,1, '')  AS ownerEmails
FROM tempConsultant as ta
GROUP BY ta.intCompanyId)

,comaddress1 as (select a.intCompanyId,
concat(a.vchaddressline1, ' ' , a.vchAddressLine2 , ' ', a.vchAddressLine3, ' ',
a.vchTown, ' ', a.vchCounty, ' ', a.vchPostcode) as address
from dCompanyTier a)

,comaddress2 as (select *,ROW_NUMBER() over (partition by intcompanyid order by intcompanyid) as rn from comaddress1)

,mainaddress as (select * from comaddress2 where rn = 1)

------------Main Script-----------------

,test as (select
  a.intCompanyId as 'company-externalId'
, iif(a.intCompanyId in (select intCompanyId from dup where dup.rn > 1)
	, iif(dup.vchCompanyName = '' or dup.vchCompanyName is NULL,concat('NJF Search - Default Company - ID',dup.intCompanyId),concat(dup.rn,' - ',dup.vchCompanyName))
	, iif(a.vchCompanyName = '' or a.vchCompanyName is null,concat('NJF Search - Default Company - ID',a.intCompanyId),a.vchCompanyName)) as 'company-name'
	, iif(b.address = '' or b.address is null,'',b.address) as 'company-address'
, iif(w.web = '' or w.web is NULL,'',left(w.web,99)) as 'company-website'
, iif(Phone.Num = '' or Phone.Num is NULL,'',Phone.Num) as 'company-phone'
, iif(CSB.switchBoard is null or CSB.switchboard = '','',CSB.switchBoard) as 'company-switchBoard'
, iif(co.ownerEmails = '' or co.ownerEmails is NULL,'',co.ownerEmails) as 'company-owners'
, left(Concat(
			'Company External ID: ', a.intCompanyId,char(10),
			concat(char(10),'Voyager Company Code: ',a.vchStandardRefCode,char(10)),
			iif(ra.vchCompanyTypeName = '' or ra.vchCompanyTypeName is NULL,'',Concat(char(10), 'Company Type: ', ra.vchCompanyTypeName, char(10))),
			iif(pon.intPONumberId = '' or pon.intPONumberId is NULL,'',Concat(char(10), 'PO Number: ', pon.vchPONumber, char(10))),
			--iif(a.tintVATCodeId = '' or a.tintVATCodeId is NULL,'',Concat(char(10),  'Company Financials:')),
			iif(a.vchCompanyRegNo = '' or a.vchCompanyRegNo is NULL,'',Concat(char(10), 'Registered No. ', a.vchCompanyRegNo)),
			iif(a.vchVATNumber = '' or a.vchVATNumber is NULL,'',Concat(char(10), 'VAT No. ', a.vchVATNumber)),
			iif(a.tintVATCodeId = '' or a.tintVATCodeId is NULL,'',Concat(char(10), 'VAT Code: ', vata.vchVATCodeName)),
			iif(vata.vchDescription = '' or vata.vchDescription is NULL,'',Concat(' (', vata.vchDescription, ' - ',vata.decVATRate, ')',char(10))),
			iif(a.vchNonUKTaxCode = '' or a.vchNonUKTaxCode is NULL,'',Concat(char(10), 'Non-UK Tax Code: ', a.vchNonUKTaxCode, char(10))),
			iif(a.vchNote = '' or a.vchNote is NULL,'',Concat(char(10),'Other Notes: ',char(10),a.vchNote,char(10)))),32000)
			as 'company-note'
from dCompany a
			left join dup on a.intCompanyId = dup.intCompanyId
			left join web w on a.intCompanyId = w.intCompanyId
			left join Phone on a.intCompanyId = Phone.intCompanyId
			left join CompOwner co on a.intCompanyId = co.intCompanyId
			left join refCompanyType ra on a.tintCompanyTypeId = ra.tintCompanyTypeId
			left join dPONumber pon on a.intCompanyId = pon.intCompanyId
			left join refVATCode vata on a.tintVATCodeId = vata.tintVATCodeId
			left join compSwitchboard csb on a.intCompanyId = csb.intCompanyId
			left join mainaddress b on a.intCompanyId = b.intCompanyId)


			select * from test</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>976</xloc>
      <yloc>864</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>custom note</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>with candidateAllEmails as (select ct.intCandidateTelecomId, ct.intCandidateId, vchValue as 'original-email'
							, case 
								when CHARINDEX(',',vchValue) = 1 then replace(vchValue,',','')
								when CHARINDEX(',',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(',',vchValue)-1)
								when CHARINDEX('/',vchValue) = 1 then replace(vchValue,'/','')
								when CHARINDEX('/',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX('/',vchValue)-1)
								when CHARINDEX(';',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(';',vchValue)-1)
								when CHARINDEX('-',vchValue) = 1 then right(vchValue,len(vchValue)-1)
								else vchValue end as email
							, vchForename, vchMiddlename, vchSurname, vchDescription,
		ROW_NUMBER() OVER(PARTITION BY ct.intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom  ct left join dCandidate c on ct.intCandidateId = c.intCandidateId
						left join dPerson p on c.intPersonId = p.intPersonId
where vchValue like '%_@_%.__%')

, Email_EditFormat as (
SELECT intCandidateId, vchDescription
	 , ltrim(rtrim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(email,'''',''),'$',''),':',''),'?',''),'~',''),' ',''),'|',''),'[',''),']',''),'mailto',''))) as email
from candidateAllEmails
where  CHARINDEX(',',email) = 0 and CHARINDEX('/',email) = 0 and rn =1)

, EmailDupRegconition as (
SELECT intCandidateId, vchDescription, email, ROW_NUMBER() OVER(PARTITION BY email ORDER BY intCandidateId ASC) AS rn 
from Email_EditFormat)


, CandidateMainEmail as (select intCandidateId
, case	when rn = 1 then email
		else concat(rn,'_',email) end as CandidateEmail
, rn
from EmailDupRegconition)

--------------------------------------CANDIDATE RESUMES
, CVName as (
select intCandidateId, dtInserted, concat('CV',intCandidateCVId,'_',convert(date,dtInserted),
 --coalesce('_' + NULLIF(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(vchCVName,'?',''),' ',''),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),''),''), vchFileType)
 iif(right(vchCVName,4)=vchFileType or right(vchCVName,5)=vchFileType,concat('_',replace(vchCVName,'/','.')),iif(vchFileType= '.', concat('_',vchCVName,'.docx'),concat('_',replace(vchCVName,'/','.'),vchFileType)))) as CVFullName
from dCandidateCV)
, CanResumes as (select intCandidateId, STUFF(
					(Select ',' + replace(replace(CVFullName,' ','_'),'%','_')
					from CVName 
					where intCandidateId = cvn.intCandidateId
    order by intCandidateId asc, dtInserted desc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'CVName'
FROM CVName as cvn
GROUP BY cvn.intCandidateId)

--, tempCanAttachment as(
--SELECT intCandidateId, ac.intAttachmentId--, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY ac.intAttachmentId ASC) AS rn
--		,case when vchFileType like '.eml' then e.msgfilename 
--		else
--		 concat(ac.intAttachmentId,'_', 
--		 iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_')
--		 , concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'), vchFileType)))
--		 end as attachmentName
--from lAttachmentCandidate ac left join dAttachment a on ac.intAttachmentId = a.intAttachmentId
--							 left join email e on a.intAttachmentId = e.AttachmentID
--where vchFileType not in ('.mp4')
--union  --union with email files got from candidate events
--select ec.intCandidateId, ae.intAttachmentId, em.msgfilename as attachmentName--, a.vchAttachmentName
--from lEventCandidate ec left join dEvent e on ec.intEventId = e.intEventId
--				--left join dCandidate c on ec.intCandidateId = c.intCandidateId
--				left join lAttachmentEvent ae on ec.intEventId = ae.intEventId
--				left join dAttachment a on ae.intAttachmentId = a.intAttachmentId
--				left join email em on ae.intAttachmentId = em.AttachmentID
--where em.AttachmentID is not null)

--, canAttachment as (SELECT intCandidateId, 
--     STUFF(
--         (SELECT ',' + replace(attachmentName,'%','_')
--          from  tempCanAttachment
--          WHERE intCandidateId =ca.intCandidateId
--    order by intCandidateId asc
--          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
--          ,1,1, '')  AS canAttachments
--FROM tempCanAttachment as ca
--GROUP BY ca.intCandidateId)

--, tempCanDocuments as (select * from CanResumes union all select * from canAttachment)
----select * from tempCanDocuments
----select * from tempCan where ApplicantId = 142
--, CanDocuments as (select intCandidateId, STUFF(
--					(Select ',' + CVName
--					from tempCanDocuments 
--					where intCandidateId = tcd.intCandidateId
--    order by intCandidateId asc
--          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
--          , 1, 1, '')  AS 'CanDocs'
--FROM tempCanDocuments as tcd
--GROUP BY tcd.intCandidateId)

------------------------------Candidate consultants as owners
, temp_Consultant as (select intcandidateId, u.vchEmail as canOwner
from lConsultantCandidate cc 
		left join dUser u on cc.intConsultantId = u.intUserId)
, CanOwners as (select intCandidateId, STUFF(
					(Select ',' + canOwner
					from temp_Consultant 
					where intCandidateId = tc.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'canOwners'
FROM temp_Consultant as tc
GROUP BY tc.intCandidateId)

, temp_homePhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 1)

, CanHomePhone as (select intCandidateId, vchValue from temp_homePhone where rn = 1)

----------------------------------Candidate Mobile
, temp_Mobile as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 5 and vchValue not like '%@%')

--Get all mobile to put to Notes
, temp_allMobile as (select intCandidateId, STUFF(
					(Select '; ' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_Mobile 
					where intCandidateId = tm.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'allMobile'
FROM temp_Mobile as tm
GROUP BY tm.intCandidateId)

, CanMobile as (select intCandidateId, vchValue from temp_Mobile where rn =1)

--------------------------------Get Work phone
, temp_WorkPhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 2)

, workPhone as (
select intCandidateId, STUFF(
					(Select '|' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_WorkPhone 
					where intCandidateId = twp.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'vchValue'
FROM temp_WorkPhone as twp
GROUP BY twp.intCandidateId)

----CANDIDATE ADDRESS: 
, tempLocation as (select ca.intCandidateId, ca.tintCandidateAddressTypeId, ca.vchAddressLine1, ca.vchAddressLine2 ,ca.vchAddressLine3
	, ca.vchTown, ca.vchCounty,ca.sintCountryId, rc.vchCountryName, rc.vchCountryCode, ca.vchPostcode, ca.vchDescription
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY tintCandidateAddressTypeId ASC) AS rn
	, Stuff(
			  Coalesce(' ' + NULLIF(ltrim(rtrim(vchAddressLine1)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine2)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine3)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchTown)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchCounty)), ''), '')
			+ Coalesce(', ' + NULLIF(rc.vchCountryName, ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchPostCode)), ''), '')
			, 1, 1, '') as 'fullAddress' 
from dCandidateAddress ca left join refCountry rc on ca.sintCountryId = rc.sintCountryId)

, candidateLocation as (select * from tempLocation where rn=1 and fullAddress is not null)

-------------------------------------------------------------MAIN SCRIPT
--insert into ImportCandidate
,mainscript as (select c.intCandidateId as 'candidate-externalId', p.intPersonId  as PersonId--just for reference afterward
, iif(rtrim(ltrim(p.vchForename)) = '' or rtrim(ltrim(p.vchForename)) is null, concat('NoFirstname-', c.intCandidateId), rtrim(ltrim(p.vchForename))) as 'candidate-firstName'
, iif(rtrim(ltrim(p.vchSurName)) = '' or rtrim(ltrim(p.vchSurName)) is null, concat('NoLastname-', c.intCandidateId), rtrim(ltrim(p.vchSurName))) as 'candidate-Lastname'
, iif(rtrim(ltrim(p.vchMiddlename)) = '' or rtrim(ltrim(p.vchMiddlename)) is null, '', rtrim(ltrim(p.vchMiddlename))) as 'candidate-Middlename'
, iif(cme.CandidateEmail = '' or cme.CandidateEmail is NULL,concat(c.intCandidateId,'@noemail.com'),cme.CandidateEmail) as 'candidate-email'
--, iif(we.workEmail = '' or we.workEmail is NULL,'',we.workEmail) as 'candidate-workEmail'--a lot of email has incorrect format, so if these candidates are skipped importing, remove work email
, cast(iif(p.dDOB is null or p.dDOB = '','',convert(varchar(10),p.dDOB,120)) as datetime) as 'candidate-dob'
, upper(t.vchTitleName) as 'candidate-title'
, case
	when p.tintGenderId = 1 then 'MALE'
	when p.tintGenderId = 2 then 'FEMALE'
	else '' end as 'candidate-gender'
--, replace(coalesce(pp.vchValue, cm.vchValue, hp.vchValue),',','') as 'candidate-phone'
, isnull(replace(cm.vchvalue,',',''),'') as 'candidate-mobile'
, isnull(wp.vchValue,'') as 'candidate-workPhone'
, isnull(hp.vchValue,'') as 'candidate-homephone'
, iif(p.vchLinkedInUrl like '%linkedin%',p.vchLinkedInUrl,'') as 'candidate-linkedin'
--, s.skype as 'candidate-skype'
--, left(c.vchComment,32000) as 'candidate-comments'--no more support importing comment
, isnull(iif(right(cl.fullAddress,1)= ',',left(replace(cl.fullAddress,',,',','),len(cl.fullAddress)-1),replace(cl.fullAddress,',,',',')),'') as 'candidate-address'
, iif(cl.vchTown = '' or cl.vchTown is null, '', cl.vchTown) as 'candidate-city'
, iif(cl.vchCounty = '' or cl.vchCounty is null, '', cl.vchCounty) as 'candidate-state'
, iif(cl.vchPostcode = '' or cl.vchPostcode is null, '', cl.vchPostcode) as 'candidate-zipCode'
, iif(cl.sintCountryId &lt;&gt; 0, cl.vchCountryCode, iif(cl.fullAddress like '%London%' or cl.fullAddress like '%Oxford%' or cl.fullAddress like '%UK%', 'GB', iif(cl.fullAddress like '%New York%' or cl.fullAddress like '%NYC%','US',''))) as 'candidate-Country'
, isnull(co.canOwners,'') as 'candidate-owners'
, case
	when rn.vchNationalityName like '%Afghan%' then 'AF'
	when rn.vchNationalityName like '%Algeri%' then 'DZ'
	when rn.vchNationalityName like '%Africa%' then 'ZA'
	when rn.vchNationalityName like '%Albani%' then 'AL'
	when rn.vchNationalityName like '%America%' then 'US'
	when rn.vchNationalityName like '%Andorr%' then 'AD'
	when rn.vchNationalityName like '%Argentin%' then 'AR'
	when rn.vchNationalityName like '%Austra%' then 'AU'
	when rn.vchNationalityName like '%Austri%' then 'AT'
	when rn.vchNationalityName like '%Belgia%' then 'BE'
	when rn.vchNationalityName like '%Brazil%' then 'BR'
	when rn.vchNationalityName like 'Britis%' then 'GB'
	when rn.vchNationalityName like 'Bucha%' then 'RO'
	when rn.vchNationalityName like '%Bulgari%' then 'BG'
	when rn.vchNationalityName like 'Burmes%' then 'MM'
	when rn.vchNationalityName like 'Cambod%' then 'KH'
	when rn.vchNationalityName like 'Canadi%' then 'CA'
	when rn.vchNationalityName like 'Chines%' then 'CN'
	when rn.vchNationalityName like 'Colombi%' then 'CO'
	when rn.vchNationalityName like 'Costa%' then 'CR'
	when rn.vchNationalityName like '%Cypr%' then 'CY'
	when rn.vchNationalityName like '%Czech%' then 'CZ'
	when rn.vchNationalityName like '%Danish%' then 'DK'
	when rn.vchNationalityName like 'Denmark%' then 'DK'
	when rn.vchNationalityName like '%Dutch%' then 'NL'
	when rn.vchNationalityName like 'East%' then 'ZA'
	when rn.vchNationalityName like '%Egypt%' then 'EG'
	when rn.vchNationalityName like 'Emiria%' then 'AE'
	when rn.vchNationalityName like 'Eritre%' then 'ER'
	when rn.vchNationalityName like 'Estoni%' then 'EE'
	when rn.vchNationalityName like 'Ethiop%' then 'ET'
	when rn.vchNationalityName like 'Europe%' then 'TR'
	when rn.vchNationalityName like 'Fijian%' then 'FJ'
	when rn.vchNationalityName like 'Filipi%' then 'PH'
	when rn.vchNationalityName like 'fili%' then 'PH'
	when rn.vchNationalityName like 'Finnish%' then 'FI'
	when rn.vchNationalityName like 'Flemish%' then 'BE'
	when rn.vchNationalityName like 'French%' then 'FR'
	when rn.vchNationalityName like 'Gabone%' then 'GA'
	when rn.vchNationalityName like 'German%' then 'DE'
	when rn.vchNationalityName like '%Georgi%' then 'GE'
	when rn.vchNationalityName like 'Ghanai%' then 'GH'
	when rn.vchNationalityName like 'Gree%' then 'GR'
	when rn.vchNationalityName like 'Hunga%' then 'HU'
	when rn.vchNationalityName like 'Indian%' then 'IN'
	when rn.vchNationalityName like 'Indone%' then 'ID'
	when rn.vchNationalityName like 'Irania%' then 'IR'
	when rn.vchNationalityName like 'Iraq%' then 'IQ'
	when rn.vchNationalityName like 'Irish%' then 'IE'
	when rn.vchNationalityName like 'Isra%' then 'IL'
	when rn.vchNationalityName like 'Ital%' then 'IT'
	when rn.vchNationalityName like 'Jamaic%' then 'JM'
	when rn.vchNationalityName like 'Japane%' then 'JP'
	when rn.vchNationalityName like 'Keny%' then 'KE'
	when rn.vchNationalityName like 'Leban%' then 'LB'
	when rn.vchNationalityName like 'Lithua%' then 'LT'
	when rn.vchNationalityName like 'Malaga%' then 'MG'
	when rn.vchNationalityName like 'Malays%' then 'MY'
	when rn.vchNationalityName like 'Malt%' then 'MT'
	when rn.vchNationalityName like 'Mauritian%' then 'MU'
	when rn.vchNationalityName like 'Mexi%' then 'MX'
	when rn.vchNationalityName like 'Moroc%' then 'MA'
	when rn.vchNationalityName like 'Namibi%' then 'NA'
	when rn.vchNationalityName like 'New Zea%' then 'NZ'
	when rn.vchNationalityName like 'Nigeri%' then 'NG'
	when rn.vchNationalityName like 'Northern Irish' then 'IE'
	when rn.vchNationalityName like 'Norwe%' then 'NO'
	when rn.vchNationalityName like 'Pakist%' then 'PK'
	when rn.vchNationalityName like 'Philip%' then 'PH'
	when rn.vchNationalityName like 'Phili%' then 'PH'
	when rn.vchNationalityName like 'Polish%' then 'PL'
	when rn.vchNationalityName like 'Portu%' then 'PT'
	when rn.vchNationalityName like 'Romani%' then 'RO'
	when rn.vchNationalityName like 'Russia%' then 'RU'
	when rn.vchNationalityName like 'Senegal%' then 'SN'
	when rn.vchNationalityName like 'Serbia%' then 'RS'
	when rn.vchNationalityName like 'Singap%' then 'SG'
	when rn.vchNationalityName like 'Slovaki%' then 'SK'
	when rn.vchNationalityName like '%South Korea%' then 'KR'
	when rn.vchNationalityName like 'Sri%' then 'LK'
	when rn.vchNationalityName like 'South Africa%' then 'ZA'
	when rn.vchNationalityName like 'Spanish%' then 'ES'
	when rn.vchNationalityName like 'Sri Lanka%' then 'LK'
	when rn.vchNationalityName like 'Sri lanka%' then 'LK'
	when rn.vchNationalityName like 'Swedish%' then 'SE'
	when rn.vchNationalityName like 'Swiss%' then 'CH'
	when rn.vchNationalityName like 'Taiwan%' then 'TW'
	when rn.vchNationalityName like '%Ukrain%' then 'UA'
	when rn.vchNationalityName like 'Thai%' then 'TH'
	when rn.vchNationalityName like 'Trinida%' then 'TT'
	when rn.vchNationalityName like 'Turk%' then 'TR'
	when rn.vchNationalityName like 'Vietna%' then 'VN'
	--when rn.vchNationalityName like 'Yugoslavia%' then 'YU'
	when rn.vchNationalityName like '%UNITED%ARAB%' then 'AE'
	when rn.vchNationalityName like '%UAE%' then 'AE'
	when rn.vchNationalityName like '%U.A.E%' then 'AE'
	when rn.vchNationalityName like '%UNITED%KINGDOM%' then 'GB'
	when rn.vchNationalityName like '%UNITED%STATES%' then 'US'
	when rn.vchNationalityName like '%US%' then 'US'
	when rn.vchNationalityName like '%Zimbab%' then 'ZW'
else '' end as 'candidate-citizenship'
, coalesce(pce.vchExplicitJobTitle,c.vchJobTitle) as 'candidate-jobTitle1'
, isnull(coalesce(pce.vchExplicitCompanyName, pce.vchCompanyName),'') as 'candidate-employer1'
--, cwh.WorkHistory as 'candidate-workHistory'
--, cr.CVName as 'candidate-resumes'
--, iif(len(cd.CanDocs)>32000,'',cd.CanDocs) as 'candidate-resume'
--, catt.canAttributes as 'candidate-skills'
--, ccb.callBackInfo : just for testing
, left(
	concat('Candidate External ID: ',c.intCandidateId
	, concat(char(10), char(10),'Voyager Candidate Code: ',c.vchStandardRefCode)
	,iif(rcs.vchCandidateStatusName = '' or rcs.vchCandidateStatusName is NULL,'',concat(char(10), char(10),'Candidate Custom Status: ',rcs.vchCandidateStatusName))--use this for njf search and njf gtp
	,concat(char(10), char(10),'Actively looking? ', replace(replace(bitActivelyLooking,0,'No'),1,'Yes'))--use this for njf contracts db
	,iif(p.vchKnownAs = '' or p.vchKnownAs is null,'',concat(char(10), char(10),'Known As: ',p.vchKnownAs))
	,iif(rc2.vchCountryName = '' or rc2.vchCountryName is NULL,'',concat(char(10), char(10),'Place Of Birth: ',rc2.vchCountryName))
	--,iif(tahp.allHomePhone = '' or tahp.allHomePhone is NULL,'',concat(char(10), char(10),'Home Phone(s): ',tahp.allHomePhone))
	,iif(tam.allMobile = '' or tam.allMobile is NULL,'',concat(char(10), char(10),'Mobile(s): ', tam.allMobile))
	--,iif(he.homeEmail = '' or he.homeEmail is NULL,'',concat(char(10), char(10),'Home Email(s): ',he.homeEmail))
	--,iif(owe.workEmail = '' or owe.workEmail is NULL,'',concat(char(10), char(10),'Work Email: ',owe.workEmail))
	--,iif(f.fax = '' or f.fax is NULL,'',concat(char(10), char(10),'Fax: ', f.fax))
	--,iif(w.web = '' or w.web is NULL,'',concat(char(10), char(10),'Website: ', w.web))
	,iif(c.vchBasedIn = '' or c.vchBasedIn is NULL,'',concat(char(10), char(10),'Based In: ', c.vchBasedIn))
	--,concat(char(10), char(10),'Relocated Flag: ', c.bitRelocate)delete from importcandidate
	,iif(rms.vchMaritalStatusName = '' or rms.vchMaritalStatusName is NULL,'',concat(char(10), char(10),'Marital Status: ', rms.vchMaritalStatusName))
	--,iif(csrc.sources = '' or csrc.sources is NULL,'',concat(char(10), char(10),'Candidate Source(s): ',csrc.sources))
	,iif(npi.vchNoticePeriodIntervalName = '','',concat(char(10), char(10),'Notice Period Interval: ',npi.vchNoticePeriodIntervalName))
	,iif(c.tintNoticePeriodQuantity = 0,'',concat(char(10), char(10),'Notice Period Quantity: ', c.tintNoticePeriodQuantity))
	--,iif(ccb.CallBackInfo = '' or ccb.CallBackInfo is NULL,'',concat(char(10), char(10),'Call Back Records: ', char(10),ccb.CallBackInfo))
	,iif(c.vchSummary = '' or c.vchSummary is NULL,'',concat(char(10), char(10), 'Summary: ',char(10), c.vchSummary, ''))
	,iif(c.vchComment = '' or c.vchComment is NULL,'',concat(char(10), char(10), 'Comment: ',char(10), c.vchComment, ''))
	),32000) as 'candidate-note'--, vchForename, vchSurname
from dCandidate c
				left join dPerson p on c.intPersonId = p.intPersonId
				left join CandidateMainEmail cme on c.intCandidateId = cme.intCandidateId
				left join refTitle t on p.tintTitleId = t.tintTitleId
				left join candidateLocation cl on c.intCandidateId = cl.intCandidateId
				--left join CandiddateCallBack ccb on c.intCandidateId = ccb.intCandidateId
				--left join CanResumes cr on c.intCandidateId = cr.intCandidateId--select distinct bitActivelyLooking from dcandidate--select * from dcandidatesystemstatus
				--left join localCanDocuments cd on c.intCandidateId = cd.intCandidateId
				--left join Temp_Candidate_WorkHistory cwh on c.intCandidateId = cwh.intCandidateId
				left join CanOwners co on c.intCandidateId = co.intCandidateId
				left join refCandidateStatus rcs on c.tintCustomStatusId = rcs.tintCandidateStatusId--njf contract has no status field
				left join refNationality rn on p.sintNationality1Id =rn.sintNationalityId
				-- left join refCountry rc on p.sintNationality1Id = rc.sintCountryId
				-- left join refCountry rc1 on p.sintNationality4Id = rc1.sintCountryId
				left join refCountry rc2 on p.sintCountryOfOriginId = rc2.sintCountryId
				left join WorkPhone wp on c.intCandidateId = wp.intCandidateId --and wp.rn = 1 --refer from sTelecom--There is only 1 candidate has 2 work phone so combine as 1
				left join CanHomePhone hp on c.intCandidateId = hp.intCandidateId
				--left join temp_allHomePhone tahp on c.intCandidateId = tahp.intCandidateId
				left join CanMobile cm on c.intCandidateId = cm.intCandidateId
				left join temp_allMobile tam on c.intCandidateId = tam.intCandidateId
				--left join tempPreferredPhone pp on c.intCandidateId = pp.intCandidateId
				left join refMaritalStatus rms on p.tintMaritalStatusId = rms.tintMaritalStatusId
				--left join CanSources csrc on c.intCandidateId = csrc.intCandidateId
				left join refNoticePeriodInterval npi on c.tintNoticePeriodIntervalId = npi.tintNoticePeriodIntervalId
				left join dPersonCurrentEmployment pce on p.intPersonId = pce.intPersonId
				--left join CanAttributes catt on c.intCandidateId = catt.intCandidateId
				--left join Skype s on c.intCandidateId = s.intCandidateId
				--left join Fax f on c.intCandidateId = f.intCandidateId
				--left join Web w on c.intCandidateId = w.intCandidateId
				--left join HomeEmail he on c.intCandidateId = he.intCandidateId
				--left join WorkEmail we on c.intCandidateId = we.intCandidateId
				--left join OriginalWorkEmail owe on c.intCandidateId = owe.intCandidateId
)
,test10 as (select a.intCandidateId
,iif(a.tintContractualLegalLawfulBasisId = '' or a.tintContractualLegalLawfulBasisId is null,'','Contractual') as Contractual_Legal_Lawful_Basis
,a.datContractualLegalLawfulBasisExpiry
,b.vchLawfulBasisName
,d.vchLawfulBasisStatus 
,a.datExpiry
,e.vchLawfulBasisReason
,iif(a.bitIsManuallyRestricted = 0,concat('Restrict Recruitment Processing: ','No'),concat('Restrict Recruitment Processing: ','Yes')) as 'Restrict Recruitment Processing'
,f.vchRestrictionReason
,a.datManuallyRestrictedUntil
from dCandidatePrivacy a
left join sLawfulBasis b on a.tintLawfulBasisId = b.tintLawfulBasisId
left join lLawfulBasisLawfulBasisStatus c on a.intLawfulBasisLawfulBasisStatusId = c.intLawfulBasisLawfulBasisStatusId
left join sLawfulBasisStatus d on c.tintLawfulBasisStatusId = d.tintLawfulBasisStatusId
left join refLawfulBasisReason e on a.intLawfulBasisReasonId = e.intLawfulBasisReasonId
left join refRestrictionReason f on a.intManuallyRestrictedReasonId = f.intRestrictionReasonId)


,test11 as (select 
intCandidateId,
concat(
nullif(concat('Contractual Legal Lawful Basis: ', Contractual_Legal_Lawful_Basis,(char(13)+char(10))),concat('Contractual Legal Lawful Basis: ',(char(13)+char(10))))
,nullif(concat('Contractual Legal Lawful Basis Expiration Date: ', datContractualLegalLawfulBasisExpiry,(char(13)+char(10))),concat('Contractual Legal Lawful Basis Expiration Date: ',(char(13)+char(10))))
,nullif(concat('Lawful Basis Name: ', vchLawfulBasisName,(char(13)+char(10))),concat('Lawful Basis Name: ',(char(13)+char(10))))
,nullif(concat('Lawful Basis Status: ', vchLawfulBasisStatus,(char(13)+char(10))),concat('Lawful Basis Status: ',(char(13)+char(10))))
,nullif(concat('Lawful Basis Expiration Date: ', datExpiry,(char(13)+char(10))),concat('Lawful Basis Expiration Date: ',(char(13)+char(10))))
,nullif(concat('Lawful Basis Reason: ', vchLawfulBasisReason,(char(13)+char(10))),concat('Lawful Basis Reason: ',(char(13)+char(10))))
,[Restrict Recruitment Processing],(char(13)+char(10))
,nullif(concat('Restriction Reason: ', vchRestrictionReason,(char(13)+char(10))),concat('Restriction Reason: ',(char(13)+char(10))))
,nullif(concat('Restriction Until: ', datManuallyRestrictedUntil,(char(13)+char(10))),concat('Restriction Until: ',(char(13)+char(10))))
) as 'Note2'
from test10)


select concat(a.[candidate-note],
(char(13)+char(10)),b.Note2) as note_final,a.* from mainscript a left join test11 b on a.[candidate-externalId] = b.intCandidateId</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1104</xloc>
      <yloc>1440</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>facebook url</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>--CANDIDATE DUPLICATE MAIL REGCONITION
with candidateAllEmails as (select ct.intCandidateTelecomId, ct.intCandidateId, vchValue as 'original-email'
							, case 
								when CHARINDEX(',',vchValue) = 1 then replace(vchValue,',','')
								when CHARINDEX(',',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(',',vchValue)-1)
								when CHARINDEX('/',vchValue) = 1 then replace(vchValue,'/','')
								when CHARINDEX('/',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX('/',vchValue)-1)
								when CHARINDEX(';',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(';',vchValue)-1)
								when CHARINDEX('-',vchValue) = 1 then right(vchValue,len(vchValue)-1)
								--when CHARINDEX('.',vchValue) = 1 then right(vchValue,len(vchValue)-1)--replace(vchValue,'.','')--
								else vchValue end as email
							, vchForename, vchMiddlename, vchSurname, vchDescription,
		ROW_NUMBER() OVER(PARTITION BY ct.intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom  ct left join dCandidate c on ct.intCandidateId = c.intCandidateId
						left join dPerson p on c.intPersonId = p.intPersonId
where vchValue like '%_@_%.__%')-- and CHARINDEX('-',vchValue) =1)

--select * from candidateAllEmails where intCandidateId = 41--Email = 'a.novikovs@gmail.com'--intCandidateId = 39740
-----------Edit email format
, Email_EditFormat as (
SELECT intCandidateId, vchDescription
	 , ltrim(rtrim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(email,'''',''),'$',''),':',''),'?',''),'~',''),' ',''),'|',''),'[',''),']',''),'mailto',''))) as email
from candidateAllEmails
where  CHARINDEX(',',email) = 0 and CHARINDEX('/',email) = 0 and rn =1)

, EmailDupRegconition as (
SELECT intCandidateId, vchDescription, email, ROW_NUMBER() OVER(PARTITION BY email ORDER BY intCandidateId ASC) AS rn 
from Email_EditFormat)

--select * from EmailDupRegconition where Email = 'a.novikovs@gmail.com'--rn>1--intCandidateId = 38603

, CandidateMainEmail as (select intCandidateId
, case	when rn = 1 then email
		else concat('NJFS_',rn,'_',email) end as CandidateEmail
, rn
from EmailDupRegconition)
--select * from CandidateMainEmail where CandidateEmail like '%a.novikovs@gmail.com'

--NOTE: must remove the first dot in the email of this candidate in the excel file: select CandidateEmail, right(CandidateEmail,len(CandidateEmail)-1) from CandidateEmail where intCandidateId = 39740--rn>1

-------------------------------------------------------------CALL BACKS
, tempCallBack as (
	select cb.intCandidateId, intCandidateCallBackId, cb.vchCallBackDetail, cb.bitActive, cb.datCallBackDate, cbt.vchCallBackTypeName
						, ROW_NUMBER() OVER(PARTITION BY cb.intCandidateId ORDER BY intCandidateCallBackId ASC) AS rn
	from dCandidateCallBack cb left join dCandidate c on cb.intCandidateId = c.intCandidateId
									left join refCallBackType cbt on cb.tintCallBackTypeId = cbt.tintCallBackTypeId
	where cb.bitActive = 1 and c.intCandidateId  is not null)

--select * from  tempCallBack
, tempCallBack1 as (select *, 
			concat(
	  iif(datCallBackDate is NULL,'',concat('--Call Back Date: ',datCallBackDate,char(10)))
	, iif(vchCallBackDetail = '' or vchCallBackDetail is NULL,'',concat('  Detail: ',vchCallBackDetail,char(10)))
	, iif(vchCallBackTypeName = '' or vchCallBackTypeName is NULL,'',concat('  Type: ',vchCallBackTypeName,char(10)))
	--, iif(bitActive = '' or bitActive is NULL,'',concat('  Flag (Active): ',bitActive,char(10)))
	--, concat('Entity: Contact', char(10))
	) as callBackInfo
from tempCallBack)

, CandiddateCallBack as (SELECT intCandidateId, 
     STUFF(
         (SELECT char(10) + callBackInfo
          from  tempCallBack1
          WHERE intCandidateId =cb1.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          ,1,1, '')  AS callBackInfo
FROM tempCallBack1 as cb1
GROUP BY cb1.intCandidateId)
--select * from CandiddateCallBack

--------------------------------------CANDIDATE RESUMES
, CVName as (
select intCandidateId, dtInserted, concat('CV',intCandidateCVId,'_',convert(date,dtInserted),
 --coalesce('_' + NULLIF(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(vchCVName,'?',''),' ',''),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),''),''), vchFileType)
 iif(right(vchCVName,4)=vchFileType or right(vchCVName,5)=vchFileType,concat('_',replace(vchCVName,'/','.')),iif(vchFileType= '.', concat('_',vchCVName,'.docx'),concat('_',replace(vchCVName,'/','.'),vchFileType)))) as CVFullName
from dCandidateCV)
, CanResumes as (select intCandidateId, STUFF(
					(Select ',' + replace(replace(CVFullName,' ','_'),'%','_')
					from CVName 
					where intCandidateId = cvn.intCandidateId
    order by intCandidateId asc, dtInserted desc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'CVName'
FROM CVName as cvn
GROUP BY cvn.intCandidateId)

--, tempCanAttachment as(
--SELECT intCandidateId, ac.intAttachmentId, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY ac.intAttachmentId ASC) AS rn,
--		 concat(ac.intAttachmentId,'_', 
--		 iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_')
--		 , concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'), vchFileType)))
--		 as attachmentName
--from lAttachmentCandidate ac left join dAttachment a on ac.intAttachmentId = a.intAttachmentId
--where vchFileType not in ('.mp4'))-- and intCandidateId = 42147)

, tempCanAttachment as(
SELECT intCandidateId, ac.intAttachmentId--, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY ac.intAttachmentId ASC) AS rn
		,case when vchFileType like '.eml' then null --e.msgfilename 
		else
		 concat(ac.intAttachmentId,'_', 
		 iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_')
		 , concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'), vchFileType)))
		 end as attachmentName
from lAttachmentCandidate ac left join dAttachment a on ac.intAttachmentId = a.intAttachmentId
							 --left join email e on a.intAttachmentId = e.AttachmentID
where vchFileType not in ('.mp4')
/*union  --union with email files got from candidate events
select ec.intCandidateId, ae.intAttachmentId , em.msgfilename as attachmentName--, a.vchAttachmentName
from lEventCandidate ec left join dEvent e on ec.intEventId = e.intEventId
				--left join dCandidate c on ec.intCandidateId = c.intCandidateId
				left join lAttachmentEvent ae on ec.intEventId = ae.intEventId
				left join dAttachment a on ae.intAttachmentId = a.intAttachmentId
				left join email em on ae.intAttachmentId = em.AttachmentID
where em.AttachmentID is not null*/
)

, canAttachment as (SELECT intCandidateId, 
     STUFF(
         (SELECT ',' + replace(attachmentName,'%','_')
          from  tempCanAttachment
          WHERE intCandidateId =ca.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          ,1,1, '')  AS canAttachments
FROM tempCanAttachment as ca
GROUP BY ca.intCandidateId)

--, tempCanDocuments as (select * from CanResumes union all select * from canAttachment)
----select * from tempCanDocuments
----select * from tempCan where ApplicantId = 142
--, CanDocuments as (select intCandidateId, STUFF(
--					(Select ',' + CVName
--					from tempCanDocuments 
--					where intCandidateId = tcd.intCandidateId
--    order by intCandidateId asc
--          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
--          , 1, 1, '')  AS 'CanDocs'
--FROM tempCanDocuments as tcd
--GROUP BY tcd.intCandidateId)
--select * from 
--select * from CanResumes
--select * from dCandidateCV
-----------------------------Get Attributes to add to Skill?
, temp_Attributes as (select intCandidateId, ac.intAttributeId, a.vchAttributeName, a.vchDescription, ROW_NUMBER() OVER(PARTITION BY ac.intCandidateId ORDER BY ac.intAttributeId ASC) AS rn
from lAttributeCandidate ac left join refAttribute a on ac.intAttributeId = a.intAttributeId)

, CanAttributes as (select intCandidateId, STUFF(
					(Select '; ' + vchAttributeName
					from temp_Attributes 
					where intCandidateId = ta.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'canAttributes'
FROM temp_Attributes as ta
GROUP BY ta.intCandidateId)
--select * from CanAttributes
------------------------------------------ Get Candidate Sources to Notes: Some candidates have more than 1 sources
, temp_Souces as (select intCandidateId, cs.sintSourceId, vchSourceName, cs.sdtAdded, cs.dtInserted, ROW_NUMBER() OVER(PARTITION BY cs.intCandidateId ORDER BY cs.sintSourceId ASC) AS rn
from dCandidateSource cs left join refSource s on cs.sintSourceId = s.sintSourceId
where cs.sintSourceId &lt;&gt; 0)

--, temp_Souces as (select intCandidateId, cs.sintSourceId, cs.sdtAdded, cs.dtInserted, ROW_NUMBER() OVER(PARTITION BY cs.intCandidateId ORDER BY cs.sintSourceId ASC) AS rn
--		, vchSourceName originalsource
--		, case 
--			when vchSourceName like 'Referral' then 'Referral'
--			when vchSourceName in ('Company','NJF Search') then 'Company Website'
--			when vchSourceName like 'Database' then 'Regenerated from Database'
--			when vchSourceName in ('By EMail','By Fax','By Post','Google','Google Search') then 'Headhunted'
--			when vchSourceName like 'LinkedIn' then 'Sourced - LinkedIn Free Account'
--			when vchSourceName like 'Sourced - LinkedIn Recruiter' then 'Sourced - LinkedIn Recruiter'
--			when vchSourceName like 'LinkedIn Job Response' then 'LinkedIn Job Response'
--			when vchSourceName like 'eFinancial Job Response' then 'eFinancial Job Response'
--			when vchSourceName like 'efinancialcareers' then 'Sourced - eFinancial Paid Account'
--			when vchSourceName like 'Bloomberg' then 'Bloomberg'
--			else 'Other' end as vchSourceName
--from dCandidateSource cs left join refSource s on cs.sintSourceId = s.sintSourceId
--where cs.sintSourceId &lt;&gt; 0)

, CanSources as (select intCandidateId, STUFF(
					(Select '; ' + vchSourceName
					from temp_Souces 
					where intCandidateId = ta.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'sources'
FROM temp_Souces as ta
GROUP BY ta.intCandidateId)
--select * from CanSources
------------------------------Candidate consultants as owners
, temp_Consultant as (select intcandidateId, u.vchEmail as canOwner
from lConsultantCandidate cc 
		left join dUser u on cc.intConsultantId = u.intUserId)
, CanOwners as (select intCandidateId, STUFF(
					(Select ',' + canOwner
					from temp_Consultant 
					where intCandidateId = tc.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'canOwners'
FROM temp_Consultant as tc
GROUP BY tc.intCandidateId)
--select * from CanOwners
----------------------------------Candidate Home Phone
, temp_homePhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 1)

--Get all mobile to put to Notes
, temp_allHomePhone as (select intCandidateId, STUFF(
					(Select '; ' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_homePhone 
					where intCandidateId = thp.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'allHomePhone'
FROM temp_homePhone as thp
GROUP BY thp.intCandidateId)

, CanHomePhone as (select intCandidateId, vchValue from temp_homePhone where rn = 1)
--select * from CanHomePhone
----------------------------------Candidate Mobile
, temp_Mobile as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 5 and vchValue not like '%@%')

--Get all mobile to put to Notes
, temp_allMobile as (select intCandidateId, STUFF(
					(Select '; ' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_Mobile 
					where intCandidateId = tm.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'allMobile'
FROM temp_Mobile as tm
GROUP BY tm.intCandidateId)

, CanMobile as (select intCandidateId, vchValue from temp_Mobile where rn =1)
--select * from CanMobile

--------------------------------Get Work phone
, temp_WorkPhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 2)

, workPhone as (
select intCandidateId, STUFF(
					(Select '|' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_WorkPhone 
					where intCandidateId = twp.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'vchValue'
FROM temp_WorkPhone as twp
GROUP BY twp.intCandidateId)

---------------------------------Get Preferred phone to put to primary phone
, tempPreferredPhone as (select c.intCandidateId, iif(ct.vchValue &lt;&gt; '', concat(ct.vchValue,vchExtension), ct.vchValue) as vchValue
from dCandidate c left join dCandidateTelecom ct on c.intPreferredTelecomId = ct.intCandidateTelecomId
where intPreferredTelecomId is not null)

--------------------------------Get Skype
, Skype as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as skype
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 9)

--------------------------------Get Fax to Note
, Fax as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as fax
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 7)

--------------------------------Get Web to Note
, tempWeb as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as web
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 8)

, Web as (
select intCandidateId, STUFF(
					(Select ', ' + replace(replace(web,char(0x0002),''),char(0x0001),'')
					from tempWeb 
					where intCandidateId = tw.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS web
FROM tempWeb as tw
GROUP BY tw.intCandidateId)

----------------------GET HOME EMAILS TO NOTES
, tempHomeEmail as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as email
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 6)

, HomeEmail as (
select intCandidateId, STUFF(
					(Select ', ' + replace(replace(replace(email,char(0x0002),''),char(0x0001),''),'  ','')
					from tempHomeEmail 
					where intCandidateId = the.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS homeEmail
FROM tempHomeEmail as the
GROUP BY the.intCandidateId)

----------------------GET WORK EMAILS TO NOTES (ORIGINAL DATA FROM DB)
, tempOriginalWorkEmail as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as email
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 10)

, OriginalWorkEmail as (
select intCandidateId, STUFF(
					(Select ', ' + replace(replace(replace(email,char(0x0002),''),char(0x0001),''),'  ','')
					from tempOriginalWorkEmail 
					where intCandidateId = the.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS workEmail
FROM tempOriginalWorkEmail as the
GROUP BY the.intCandidateId)

---------------------GET WORK EMAILS TO WORK EMAIL FIELD
, tempWorkEmail as (
select ct.intCandidateTelecomId, ct.intCandidateId, vchValue as 'original-email'
							, case 
								when CHARINDEX(',',vchValue) = 1 then replace(vchValue,',','')
								when CHARINDEX(',',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(',',vchValue)-1)
								when CHARINDEX('/',vchValue) = 1 then replace(vchValue,'/','')
								when CHARINDEX('/',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX('/',vchValue)-1)
								when CHARINDEX(';',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(';',vchValue)-1)
								when CHARINDEX('-',vchValue) = 1 then right(vchValue,len(vchValue)-1)
								when right(vchValue,1) = '.' then left(vchValue,len(vchValue)-1)
								--when CHARINDEX('.',vchValue) = 1 then right(vchValue,len(vchValue)-1)--replace(vchValue,'.','')--
								else vchValue end as email
							, vchForename, vchMiddlename, vchSurname, vchDescription,
		ROW_NUMBER() OVER(PARTITION BY ct.intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn--NO CANDIDATE HAVE MORE THAN 1 WORK EMAILS
from dCandidateTelecom  ct left join dCandidate c on ct.intCandidateId = c.intCandidateId
						left join dPerson p on c.intPersonId = p.intPersonId
where vchValue like '%_@_%.__%' and tintTelecomId = 10)

--select * from tempWorkEmail where rn>1
, WorkEmail as (
select intCandidateId, STUFF(
					(Select ', ' + ltrim(rtrim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(email,'''',''),'$',''),':',''),'?',''),'~',''),' ',''),'|',''),'[',''),']',''),'mailto',''),'(',''),')',''),'&lt;',''),'---thisone',''),'----',''),'!',''),' - new email add?',''))) as workEmail
					from tempWorkEmail 
					where intCandidateId = twe.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS workEmail
FROM tempWorkEmail as twe
GROUP BY twe.intCandidateId)

----CANDIDATE ADDRESS: 
, tempLocation as (select ca.intCandidateId, ca.tintCandidateAddressTypeId, ca.vchAddressLine1, ca.vchAddressLine2 ,ca.vchAddressLine3
	, ca.vchTown, ca.vchCounty,ca.sintCountryId, rc.vchCountryName, rc.vchCountryCode, ca.vchPostcode, ca.vchDescription
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY tintCandidateAddressTypeId ASC) AS rn
	, Stuff(
			  Coalesce(' ' + NULLIF(ltrim(rtrim(vchAddressLine1)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine2)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine3)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchTown)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchCounty)), ''), '')
			+ Coalesce(', ' + NULLIF(rc.vchCountryName, ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchPostCode)), ''), '')
			, 1, 1, '') as 'fullAddress' 
from dCandidateAddress ca left join refCountry rc on ca.sintCountryId = rc.sintCountryId)

, candidateLocation as (select * from tempLocation where rn=1 and fullAddress is not null)


, cer (intCandidateId, note) as (
       SELECT a.intCandidateId, STUFF(( 
                     select char(10) + 
                     stuff(
                       --Coalesce('Expected Rate Type: ' + NULLIF(cast(tintExpectedRateType as varchar(max)), '') + char(10), '')
                     + Coalesce('Expected Rate Min: ' + NULLIF(cast(decMin as varchar(max)), '') + char(10), '')
                     + Coalesce('Expected Rate Max: ' + NULLIF(cast(decMax as varchar(max)), '') + char(10), '')
                     , 1, 0, '') as note
                     from dCandidateExpectedRate
       WHERE intCandidateId = a.intCandidateId
       FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)'), 1, 1, '') AS es 
       FROM dCandidateExpectedRate as a
       --where intPersonId in (54)
       GROUP BY a.intCandidateId 
       )
--select * from cer where intCandidateId in (-1);
--select top 10 * from dCandidateExpectedRate	



-------------------------------------------------------------MAIN SCRIPT
--insert into ImportCandidate
select --top 10
         c.intCandidateId as 'candidate-externalId' -- p.intPersonId  as PersonId --just for reference afterward
       , iif(rtrim(ltrim(p.vchForename)) = '' or rtrim(ltrim(p.vchForename)) is null, 'No Firstname', rtrim(ltrim(p.vchForename))) as 'candidate-firstName'
       , iif(rtrim(ltrim(p.vchSurName)) = '' or rtrim(ltrim(p.vchSurName)) is null, concat('Lastname-', c.intCandidateId), rtrim(ltrim(p.vchSurName))) as 'candidate-Lastname'
       , iif(rtrim(ltrim(p.vchMiddlename)) = '' or rtrim(ltrim(p.vchMiddlename)) is null, '', rtrim(ltrim(p.vchMiddlename))) as 'candidate-Middlename'
       , iif(cme.CandidateEmail = '' or cme.CandidateEmail is NULL,concat(c.intCandidateId,'@noemailaddress.co'),cme.CandidateEmail) as 'candidate-email'
       , iif(we.workEmail = '' or we.workEmail is NULL,'',we.workEmail) as 'candidate-workEmail'--a lot of email has incorrect format, so if these candidates are skipped importing, remove work email
       , isnull(convert(varchar(10),p.dDOB,120),'') as 'candidate-dob'
       , upper(t.vchTitleName) as 'candidate-title'
       , case
              when p.tintGenderId = 1 then 'MALE'
              when p.tintGenderId = 2 then 'FEMALE'
              else '' end as 'candidate-gender'
       , isnull(replace(coalesce(pp.vchValue, cm.vchValue, hp.vchValue),',',''),'') as 'candidate-phone'
       , isnull(replace(cm.vchvalue,',',''),'') as 'candidate-mobile'
       , isnull(wp.vchValue,'') as 'candidate-workPhone'
       , isnull(hp.vchValue,'') as 'candidate-homephone'
       , p.vchLinkedInUrl as 'candidate-linkedin'
       , p.vchXingUrl as 'candidate-Xing' -->>
       , p.vchFacebookProfileUrl as 'candidate-Facebook' -->>
--, s.skype as 'candidate-skype'
--, left(c.vchComment,32000) as 'candidate-comments'--no more support importing comment
       , isnull(iif(right(cl.fullAddress,1)= ',',left(replace(cl.fullAddress,',,',','),len(cl.fullAddress)-1),replace(cl.fullAddress,',,',',')),'') as 'candidate-address'
       , iif(cl.vchTown = '' or cl.vchTown is null, '', cl.vchTown) as 'candidate-city'
       , iif(cl.vchCounty = '' or cl.vchCounty is null, '', cl.vchCounty) as 'candidate-state'
       , iif(cl.vchPostcode = '' or cl.vchPostcode is null, '', cl.vchPostcode) as 'candidate-zipCode'
       , iif(cl.sintCountryId &lt;&gt; 0, cl.vchCountryCode, iif(cl.fullAddress like '%London%' or cl.fullAddress like '%Oxford%' or cl.fullAddress like '%UK%', 'GB', iif(cl.fullAddress like '%New York%' or cl.fullAddress like '%NYC%','US',''))) as 'candidate-Country'
, isnull(co.canOwners,'') as 'candidate-owners'
--, coalesce(rc.vchCountryCode,rc1.vchCountryCode) as 'candidate-citizenship': wrong table to join: get the correct table refNationality
--select distinct sintNationalityId, sintNationality1Id, vchNationalityName
--from refNationality left join dPerson p on sintNationalityId = sintNationality1Id
--where sintNationality1Id is not null
--order by sintNationalityId
, case
	when rn.vchNationalityName like 'Azerbai%' then 'AZ'
       when rn.vchNationalityName like 'Banglad%' then 'BD'
       when rn.vchNationalityName like 'Czech%' then 'CZ'
       when rn.vchNationalityName like 'Tunisia%' then 'TN'
       when rn.vchNationalityName like 'Ukraini%' then 'UA'
       
	when rn.vchNationalityName like '%Afghan%' then 'AF'
	when rn.vchNationalityName like '%Algeri%' then 'DZ'
	when rn.vchNationalityName like '%Africa%' then 'ZA'
	when rn.vchNationalityName like '%Albani%' then 'AL'
	when rn.vchNationalityName like '%America%' then 'US'
	when rn.vchNationalityName like '%Andorr%' then 'AD'
	when rn.vchNationalityName like '%Argentin%' then 'AR'
	when rn.vchNationalityName like '%Austra%' then 'AU'
	when rn.vchNationalityName like '%Austri%' then 'AT'
	when rn.vchNationalityName like '%Belgia%' then 'BE'
	when rn.vchNationalityName like '%Brazil%' then 'BR'
	when rn.vchNationalityName like 'Britis%' then 'GB'
	when rn.vchNationalityName like 'Bucha%' then 'RO'
	when rn.vchNationalityName like '%Bulgari%' then 'BG'
	when rn.vchNationalityName like 'Burmes%' then 'MM'
	when rn.vchNationalityName like 'Cambod%' then 'KH'
	when rn.vchNationalityName like 'Canadi%' then 'CA'
	when rn.vchNationalityName like 'Chines%' then 'CN'
	when rn.vchNationalityName like 'Colombi%' then 'CO'
	when rn.vchNationalityName like 'Costa%' then 'CR'
	when rn.vchNationalityName like '%Cypr%' then 'CY'
	when rn.vchNationalityName like '%Czech%' then 'CZ'
	when rn.vchNationalityName like '%Danish%' then 'DK'
	when rn.vchNationalityName like 'Denmark%' then 'DK'
	when rn.vchNationalityName like '%Dutch%' then 'NL'
	when rn.vchNationalityName like 'East%' then 'ZA'
	when rn.vchNationalityName like '%Egypt%' then 'EG'
	when rn.vchNationalityName like 'Emiria%' then 'AE'
	when rn.vchNationalityName like 'Eritre%' then 'ER'
	when rn.vchNationalityName like 'Estoni%' then 'EE'
	when rn.vchNationalityName like 'Ethiop%' then 'ET'
	when rn.vchNationalityName like 'Europe%' then 'TR'
	when rn.vchNationalityName like 'Fijian%' then 'FJ'
	when rn.vchNationalityName like 'Filipi%' then 'PH'
	when rn.vchNationalityName like 'fili%' then 'PH'
	when rn.vchNationalityName like 'Finnish%' then 'FI'
	when rn.vchNationalityName like 'Flemish%' then 'BE'
	when rn.vchNationalityName like 'French%' then 'FR'
	when rn.vchNationalityName like 'Gabone%' then 'GA'
	when rn.vchNationalityName like 'German%' then 'DE'
	when rn.vchNationalityName like '%Georgi%' then 'GE'
	when rn.vchNationalityName like 'Ghanai%' then 'GH'
	when rn.vchNationalityName like 'Gree%' then 'GR'
	when rn.vchNationalityName like 'Hunga%' then 'HU'
	when rn.vchNationalityName like 'Indian%' then 'IN'
	when rn.vchNationalityName like 'Indone%' then 'ID'
	when rn.vchNationalityName like 'Irania%' then 'IR'
	when rn.vchNationalityName like 'Iraq%' then 'IQ'
	when rn.vchNationalityName like 'Irish%' then 'IE'
	when rn.vchNationalityName like 'Isra%' then 'IL'
	when rn.vchNationalityName like 'Ital%' then 'IT'
	when rn.vchNationalityName like 'Jamaic%' then 'JM'
	when rn.vchNationalityName like 'Japane%' then 'JP'
	when rn.vchNationalityName like 'Keny%' then 'KE'
	when rn.vchNationalityName like 'Leban%' then 'LB'
	when rn.vchNationalityName like 'Lithua%' then 'LT'
	when rn.vchNationalityName like 'Malaga%' then 'MG'
	when rn.vchNationalityName like 'Malays%' then 'MY'
	when rn.vchNationalityName like 'Malt%' then 'MT'
	when rn.vchNationalityName like 'Mauritian%' then 'MU'
	when rn.vchNationalityName like 'Mexi%' then 'MX'
	when rn.vchNationalityName like 'Moroc%' then 'MA'
	when rn.vchNationalityName like 'Namibi%' then 'NA'
	when rn.vchNationalityName like 'New Zea%' then 'NZ'
	when rn.vchNationalityName like 'Nigeri%' then 'NG'
	when rn.vchNationalityName like 'Northern Irish' then 'IE'
	when rn.vchNationalityName like 'Norwe%' then 'NO'
	when rn.vchNationalityName like 'Pakist%' then 'PK'
	when rn.vchNationalityName like 'Philip%' then 'PH'
	when rn.vchNationalityName like 'Phili%' then 'PH'
	when rn.vchNationalityName like 'Polish%' then 'PL'
	when rn.vchNationalityName like 'Portu%' then 'PT'
	when rn.vchNationalityName like 'Romani%' then 'RO'
	when rn.vchNationalityName like 'Russia%' then 'RU'
	when rn.vchNationalityName like 'Senegal%' then 'SN'
	when rn.vchNationalityName like 'Serbia%' then 'RS'
	when rn.vchNationalityName like 'Singap%' then 'SG'
	when rn.vchNationalityName like 'Slovaki%' then 'SK'
	when rn.vchNationalityName like '%South Korea%' then 'KR'
	when rn.vchNationalityName like 'Sri%' then 'LK'
	when rn.vchNationalityName like 'South Africa%' then 'ZA'
	when rn.vchNationalityName like 'Spanish%' then 'ES'
	when rn.vchNationalityName like 'Sri Lanka%' then 'LK'
	when rn.vchNationalityName like 'Sri lanka%' then 'LK'
	when rn.vchNationalityName like 'Swedish%' then 'SE'
	when rn.vchNationalityName like 'Swiss%' then 'CH'
	when rn.vchNationalityName like 'Taiwan%' then 'TW'
	when rn.vchNationalityName like '%Ukrain%' then 'UA'
	when rn.vchNationalityName like 'Thai%' then 'TH'
	when rn.vchNationalityName like 'Trinida%' then 'TT'
	when rn.vchNationalityName like 'Turk%' then 'TR'
	when rn.vchNationalityName like 'Vietna%' then 'VN'
	--when rn.vchNationalityName like 'Yugoslavia%' then 'YU'
	when rn.vchNationalityName like '%UNITED%ARAB%' then 'AE'
	when rn.vchNationalityName like '%UAE%' then 'AE'
	when rn.vchNationalityName like '%U.A.E%' then 'AE'
	when rn.vchNationalityName like '%UNITED%KINGDOM%' then 'GB'
	when rn.vchNationalityName like '%UNITED%STATES%' then 'US'
	when rn.vchNationalityName like '%US%' then 'US'
	when rn.vchNationalityName like '%Zimbab%' then 'ZW'
else '' end as 'candidate-citizenship' --, rn.vchNationalityName
       , coalesce(pce.vchExplicitJobTitle,c.vchJobTitle) as 'candidate-jobTitle1'
       , isnull(coalesce(pce.vchExplicitCompanyName, pce.vchCompanyName),'') as 'candidate-employer1'
       --, isnull(cwh.WorkHistory,'') as 'candidate-workHistory'
--, cr.CVName as 'candidate-resumes'
       --, isnull(iif(len(cd.CanDocs)>32000,'',cd.CanDocs),'') as 'candidate-resume'
, isnull(catt.canAttributes,'') as 'candidate-skills'
--, ccb.callBackInfo : just for testing
, rms.vchMaritalStatusName as 'Marital status' -->>
, left(
	concat('ID: ',c.intCandidateId
	,iif(rcs.vchCandidateStatusName = '' or rcs.vchCandidateStatusName is NULL,'',concat(char(10),'Status: ',rcs.vchCandidateStatusName))--use this for njf search and njf gtp
	,iif(p.vchKnownAs = '' or p.vchKnownAs is null,'',concat(char(10),'Known As: ',p.vchKnownAs))
	--,iif(rms.vchMaritalStatusName = '' or rms.vchMaritalStatusName is NULL,'',concat(char(10), char(10),'Marital Status: ', rms.vchMaritalStatusName))
       ,iif(p.vchTwitterProfileUrl = '' or p.vchTwitterProfileUrl is null,'',concat(char(10),'Twistter: ',p.vchTwitterProfileUrl))
	   ,iif(c.bitRightToWork = 0,concat(char(10),'No'),concat(char(10),'Yes'))
	,iif(npi.vchNoticePeriodIntervalName = '','',concat(char(10),'Notice Period Interval: ',npi.vchNoticePeriodIntervalName))
	,iif(cer.note = '' or cer.note is NULL,'',cer.note)
	,iif(c.vchPreferredLocation = '' or c.vchPreferredLocation is null,'',concat(char(10),'Preferred Location: ', c.vchPreferredLocation))
	,iif(c.vchSummary = '' or c.vchSummary is NULL,'',concat(char(10), 'Summary: ',char(10), c.vchSummary, ''))
/*	,iif(c.tintNoticePeriodQuantity = 0,'',concat(char(10), char(10),'Notice Period Quantity: ', c.tintNoticePeriodQuantity))
	,concat(char(10), char(10),'Voyager Candidate Code: ',c.vchStandardRefCode)
	,concat(char(10), char(10),'Actively looking? ', replace(replace(bitActivelyLooking,0,'No'),1,'Yes'))--use this for njf contracts db
	,iif(rc2.vchCountryName = '' or rc2.vchCountryName is NULL,'',concat(char(10), char(10),'Place Of Birth: ',rc2.vchCountryName))
	,iif(tahp.allHomePhone = '' or tahp.allHomePhone is NULL,'',concat(char(10), char(10),'Home Phone(s): ',tahp.allHomePhone))
	,iif(tam.allMobile = '' or tam.allMobile is NULL,'',concat(char(10), char(10),'Mobile(s): ', tam.allMobile))
	,iif(he.homeEmail = '' or he.homeEmail is NULL,'',concat(char(10), char(10),'Home Email(s): ',he.homeEmail))
	,iif(owe.workEmail = '' or owe.workEmail is NULL,'',concat(char(10), char(10),'Work Email: ',owe.workEmail))
	,iif(f.fax = '' or f.fax is NULL,'',concat(char(10), char(10),'Fax: ', f.fax))
	,iif(w.web = '' or w.web is NULL,'',concat(char(10), char(10),'Website: ', w.web))
	,iif(c.vchBasedIn = '' or c.vchBasedIn is NULL,'',concat(char(10), char(10),'Based In: ', c.vchBasedIn))
	--,concat(char(10), char(10),'Relocated Flag: ', c.bitRelocate)delete from importcandidate
	,iif(csrc.sources = '' or csrc.sources is NULL,'',concat(char(10), char(10),'Candidate Source(s): ',csrc.sources))
       ,iif(ccb.CallBackInfo = '' or ccb.CallBackInfo is NULL,'',concat(char(10), char(10),'Call Back Records: ', char(10),ccb.CallBackInfo)) */	
	),32000) as 'candidate-note'--, vchForename, vchSurname
-- select count(*) --22568-- select distinct rn.vchNationalityName
from dCandidate c
				left join dPerson p on c.intPersonId = p.intPersonId
				left join CandidateMainEmail cme on c.intCandidateId = cme.intCandidateId
				left join refTitle t on p.tintTitleId = t.tintTitleId
				left join candidateLocation cl on c.intCandidateId = cl.intCandidateId
				left join CandiddateCallBack ccb on c.intCandidateId = ccb.intCandidateId
				--left join CanResumes cr on c.intCandidateId = cr.intCandidateId--select distinct bitActivelyLooking from dcandidate--select * from dcandidatesystemstatus
				--left join localCanDocuments cd on c.intCandidateId = cd.intCandidateId
				--left join Temp_Candidate_WorkHistory cwh on c.intCandidateId = cwh.intCandidateId
				left join CanOwners co on c.intCandidateId = co.intCandidateId
				left join refCandidateStatus rcs on c.tintCustomStatusId = rcs.tintCandidateStatusId--njf contract has no status field
				left join refNationality rn on p.sintNationality1Id =rn.sintNationalityId
				-- left join refCountry rc on p.sintNationality1Id = rc.sintCountryId
				-- left join refCountry rc1 on p.sintNationality4Id = rc1.sintCountryId
				left join refCountry rc2 on p.sintCountryOfOriginId = rc2.sintCountryId
				left join WorkPhone wp on c.intCandidateId = wp.intCandidateId --and wp.rn = 1 --refer from sTelecom--There is only 1 candidate has 2 work phone so combine as 1
				left join CanHomePhone hp on c.intCandidateId = hp.intCandidateId
				left join temp_allHomePhone tahp on c.intCandidateId = tahp.intCandidateId
				left join CanMobile cm on c.intCandidateId = cm.intCandidateId
				left join temp_allMobile tam on c.intCandidateId = tam.intCandidateId
				left join tempPreferredPhone pp on c.intCandidateId = pp.intCandidateId
				left join refMaritalStatus rms on p.tintMaritalStatusId = rms.tintMaritalStatusId
				left join CanSources csrc on c.intCandidateId = csrc.intCandidateId
				left join refNoticePeriodInterval npi on c.tintNoticePeriodIntervalId = npi.tintNoticePeriodIntervalId
				left join dPersonCurrentEmployment pce on p.intPersonId = pce.intPersonId
				left join CanAttributes catt on c.intCandidateId = catt.intCandidateId
				left join Skype s on c.intCandidateId = s.intCandidateId
				left join Fax f on c.intCandidateId = f.intCandidateId
				left join Web w on c.intCandidateId = w.intCandidateId
				left join HomeEmail he on c.intCandidateId = he.intCandidateId
				left join WorkEmail we on c.intCandidateId = we.intCandidateId
				left join OriginalWorkEmail owe on c.intCandidateId = owe.intCandidateId
				left join cer on cer.intCandidateId = c.intCandidateId
--where c.bitdeleted = 1				
--where c.intCandidateId in (select intCandidateId from temp_Can) --and cd.CanDocs is not null
--where cme.CandidateEmail = 'a.novikovs@gmail.com'
--where c.intCandidateId = 1197
--where len(CanDocs)>32000
--where vchforename = 'Ajay' and vchSurname = 'Pandey'--this guy has skype info
--where c.intCandidateId in (48445,31880,44007,15490,44296,16796,38402,44798,44982,38455,15944,45834,45826,10987,22607,11200,52754,53354,19816,40589,44976,45050,44823,3334,44314,45794,22999,51044,2732,52304,44988)
--order by c.intCandidateId</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>608</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>form &amp; field ID lookup</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>configurable_form_field</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>lookup_name</name>
        <field>name</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>field_id</rename>
        <default/>
        <type>None</type>
      </value>
      <value>
        <name>form_id</name>
        <rename>form_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>368</xloc>
      <yloc>1520</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>job</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <sql>select id,insert_timestamp,position_id from activity where position_id is not null</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>480</xloc>
      <yloc>752</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>job activity</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>----------------Get all events of a job to a comment
with tempEvents as (select intJobId, ej.intEventId, sdtEventDate, vchShortname, vchEventDetail, vchSystemEventAction
from lEventJob ej left join dEvent e on ej.intEventId = e.intEventId
				  left join dUser u on e.intLoggedById = u.intUserId
				  left join sEventAction sea on e.sintEventActionId = sea.tintsystemeventactionId)

, JobEvents as (select intJobId,
STUFF(
         (SELECT char(10) + char(10) + 'Event Date: ' + convert(varchar(20),sdtEventDate,120) + char(10) + 'Logged By: ' + vchShortname + char(10)
		  + coalesce('Action: ' + vchSystemEventAction + char(10), '')
		  + iif(vchEventDetail = '' or vchEventDetail is null,'',concat('Event Detail: ',char(10),vchEventDetail))
          from  tempEvents
          WHERE intJobId = te.intJobId
		  order by sdtEventDate desc
          FOR XML PATH (''),TYPE).value('.','nvarchar(MAX)')
          , 1, 2, '')  AS eventComment
FROM tempEvents as te
GROUP BY te.intJobId)

select intJobId as External_Id, -10 as user_account_Id
		, CURRENT_TIMESTAMP as Insert_TimeStamp, -10 as AssignedUserId, 'comment' as category, 'job' as type
		, eventComment as Content
		from JobEvents --where intCompanyTierContactId = 15111
--select * from tempWorkHistory1</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>752</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>nationality</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>with candidateAllEmails as (select ct.intCandidateTelecomId, ct.intCandidateId, vchValue as 'original-email'
							, case 
								when CHARINDEX(',',vchValue) = 1 then replace(vchValue,',','')
								when CHARINDEX(',',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(',',vchValue)-1)
								when CHARINDEX('/',vchValue) = 1 then replace(vchValue,'/','')
								when CHARINDEX('/',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX('/',vchValue)-1)
								when CHARINDEX(';',vchValue) &lt;&gt; 0 then left(vchValue,CHARINDEX(';',vchValue)-1)
								when CHARINDEX('-',vchValue) = 1 then right(vchValue,len(vchValue)-1)
								else vchValue end as email
							, vchForename, vchMiddlename, vchSurname, vchDescription,
		ROW_NUMBER() OVER(PARTITION BY ct.intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom  ct left join dCandidate c on ct.intCandidateId = c.intCandidateId
						left join dPerson p on c.intPersonId = p.intPersonId
where vchValue like '%_@_%.__%')

, Email_EditFormat as (
SELECT intCandidateId, vchDescription
	 , ltrim(rtrim(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(email,'''',''),'$',''),':',''),'?',''),'~',''),' ',''),'|',''),'[',''),']',''),'mailto',''))) as email
from candidateAllEmails
where  CHARINDEX(',',email) = 0 and CHARINDEX('/',email) = 0 and rn =1)

, EmailDupRegconition as (
SELECT intCandidateId, vchDescription, email, ROW_NUMBER() OVER(PARTITION BY email ORDER BY intCandidateId ASC) AS rn 
from Email_EditFormat)


, CandidateMainEmail as (select intCandidateId
, case	when rn = 1 then email
		else concat(rn,'_',email) end as CandidateEmail
, rn
from EmailDupRegconition)

--------------------------------------CANDIDATE RESUMES
, CVName as (
select intCandidateId, dtInserted, concat('CV',intCandidateCVId,'_',convert(date,dtInserted),
 --coalesce('_' + NULLIF(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(vchCVName,'?',''),' ',''),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),''),''), vchFileType)
 iif(right(vchCVName,4)=vchFileType or right(vchCVName,5)=vchFileType,concat('_',replace(vchCVName,'/','.')),iif(vchFileType= '.', concat('_',vchCVName,'.docx'),concat('_',replace(vchCVName,'/','.'),vchFileType)))) as CVFullName
from dCandidateCV)
, CanResumes as (select intCandidateId, STUFF(
					(Select ',' + replace(replace(CVFullName,' ','_'),'%','_')
					from CVName 
					where intCandidateId = cvn.intCandidateId
    order by intCandidateId asc, dtInserted desc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'CVName'
FROM CVName as cvn
GROUP BY cvn.intCandidateId)

--, tempCanAttachment as(
--SELECT intCandidateId, ac.intAttachmentId--, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY ac.intAttachmentId ASC) AS rn
--		,case when vchFileType like '.eml' then e.msgfilename 
--		else
--		 concat(ac.intAttachmentId,'_', 
--		 iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_')
--		 , concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':','_'),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'), vchFileType)))
--		 end as attachmentName
--from lAttachmentCandidate ac left join dAttachment a on ac.intAttachmentId = a.intAttachmentId
--							 left join email e on a.intAttachmentId = e.AttachmentID
--where vchFileType not in ('.mp4')
--union  --union with email files got from candidate events
--select ec.intCandidateId, ae.intAttachmentId, em.msgfilename as attachmentName--, a.vchAttachmentName
--from lEventCandidate ec left join dEvent e on ec.intEventId = e.intEventId
--				--left join dCandidate c on ec.intCandidateId = c.intCandidateId
--				left join lAttachmentEvent ae on ec.intEventId = ae.intEventId
--				left join dAttachment a on ae.intAttachmentId = a.intAttachmentId
--				left join email em on ae.intAttachmentId = em.AttachmentID
--where em.AttachmentID is not null)

--, canAttachment as (SELECT intCandidateId, 
--     STUFF(
--         (SELECT ',' + replace(attachmentName,'%','_')
--          from  tempCanAttachment
--          WHERE intCandidateId =ca.intCandidateId
--    order by intCandidateId asc
--          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
--          ,1,1, '')  AS canAttachments
--FROM tempCanAttachment as ca
--GROUP BY ca.intCandidateId)

--, tempCanDocuments as (select * from CanResumes union all select * from canAttachment)
----select * from tempCanDocuments
----select * from tempCan where ApplicantId = 142
--, CanDocuments as (select intCandidateId, STUFF(
--					(Select ',' + CVName
--					from tempCanDocuments 
--					where intCandidateId = tcd.intCandidateId
--    order by intCandidateId asc
--          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
--          , 1, 1, '')  AS 'CanDocs'
--FROM tempCanDocuments as tcd
--GROUP BY tcd.intCandidateId)

------------------------------Candidate consultants as owners
, temp_Consultant as (select intcandidateId, u.vchEmail as canOwner
from lConsultantCandidate cc 
		left join dUser u on cc.intConsultantId = u.intUserId)
, CanOwners as (select intCandidateId, STUFF(
					(Select ',' + canOwner
					from temp_Consultant 
					where intCandidateId = tc.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 1, '')  AS 'canOwners'
FROM temp_Consultant as tc
GROUP BY tc.intCandidateId)

, temp_homePhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 1)

, CanHomePhone as (select intCandidateId, vchValue from temp_homePhone where rn = 1)

----------------------------------Candidate Mobile
, temp_Mobile as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 5 and vchValue not like '%@%')

--Get all mobile to put to Notes
, temp_allMobile as (select intCandidateId, STUFF(
					(Select '; ' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_Mobile 
					where intCandidateId = tm.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'allMobile'
FROM temp_Mobile as tm
GROUP BY tm.intCandidateId)

, CanMobile as (select intCandidateId, vchValue from temp_Mobile where rn =1)

--------------------------------Get Work phone
, temp_WorkPhone as (
select intCandidateTelecomId, intCandidateId, vchDescription, iif(vchExtension &lt;&gt; '', concat(vchValue,vchExtension), vchValue) as vchValue
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY intCandidateTelecomId ASC) AS rn
from dCandidateTelecom 
where tintTelecomId = 2)

, workPhone as (
select intCandidateId, STUFF(
					(Select '|' + replace(replace(vchValue,char(0x0002),''),char(0x0001),'')
					from temp_WorkPhone 
					where intCandidateId = twp.intCandidateId
    order by intCandidateId asc
          FOR XML PATH (''), TYPE).value('.', 'nvarchar(MAX)')
          , 1, 2, '')  AS 'vchValue'
FROM temp_WorkPhone as twp
GROUP BY twp.intCandidateId)

----CANDIDATE ADDRESS: 
, tempLocation as (select ca.intCandidateId, ca.tintCandidateAddressTypeId, ca.vchAddressLine1, ca.vchAddressLine2 ,ca.vchAddressLine3
	, ca.vchTown, ca.vchCounty,ca.sintCountryId, rc.vchCountryName, rc.vchCountryCode, ca.vchPostcode, ca.vchDescription
	, ROW_NUMBER() OVER(PARTITION BY intCandidateId ORDER BY tintCandidateAddressTypeId ASC) AS rn
	, Stuff(
			  Coalesce(' ' + NULLIF(ltrim(rtrim(vchAddressLine1)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine2)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchAddressLine3)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchTown)), ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchCounty)), ''), '')
			+ Coalesce(', ' + NULLIF(rc.vchCountryName, ''), '')
			+ Coalesce(', ' + NULLIF(ltrim(rtrim(vchPostCode)), ''), '')
			, 1, 1, '') as 'fullAddress' 
from dCandidateAddress ca left join refCountry rc on ca.sintCountryId = rc.sintCountryId)

, candidateLocation as (select * from tempLocation where rn=1 and fullAddress is not null)

-------------------------------------------------------------MAIN SCRIPT
--insert into ImportCandidate
,test as (select c.intCandidateId as 'candidate-externalId', p.intPersonId  as PersonId--just for reference afterward
, iif(rtrim(ltrim(p.vchForename)) = '' or rtrim(ltrim(p.vchForename)) is null, concat('NoFirstname-', c.intCandidateId), rtrim(ltrim(p.vchForename))) as 'candidate-firstName'
, iif(rtrim(ltrim(p.vchSurName)) = '' or rtrim(ltrim(p.vchSurName)) is null, concat('NoLastname-', c.intCandidateId), rtrim(ltrim(p.vchSurName))) as 'candidate-Lastname'
, iif(rtrim(ltrim(p.vchMiddlename)) = '' or rtrim(ltrim(p.vchMiddlename)) is null, '', rtrim(ltrim(p.vchMiddlename))) as 'candidate-Middlename'
, iif(cme.CandidateEmail = '' or cme.CandidateEmail is NULL,concat(c.intCandidateId,'@noemail.com'),cme.CandidateEmail) as 'candidate-email'
--, iif(we.workEmail = '' or we.workEmail is NULL,'',we.workEmail) as 'candidate-workEmail'--a lot of email has incorrect format, so if these candidates are skipped importing, remove work email
, cast(iif(p.dDOB is null or p.dDOB = '','',convert(varchar(10),p.dDOB,120)) as datetime) as 'candidate-dob'
, upper(t.vchTitleName) as 'candidate-title'
, case
	when p.tintGenderId = 1 then 'MALE'
	when p.tintGenderId = 2 then 'FEMALE'
	else '' end as 'candidate-gender'
--, replace(coalesce(pp.vchValue, cm.vchValue, hp.vchValue),',','') as 'candidate-phone'
, isnull(replace(cm.vchvalue,',',''),'') as 'candidate-mobile'
, isnull(wp.vchValue,'') as 'candidate-workPhone'
, isnull(hp.vchValue,'') as 'candidate-homephone'
, iif(p.vchLinkedInUrl like '%linkedin%',p.vchLinkedInUrl,'') as 'candidate-linkedin'
--, s.skype as 'candidate-skype'
--, left(c.vchComment,32000) as 'candidate-comments'--no more support importing comment
, isnull(iif(right(cl.fullAddress,1)= ',',left(replace(cl.fullAddress,',,',','),len(cl.fullAddress)-1),replace(cl.fullAddress,',,',',')),'') as 'candidate-address'
, iif(cl.vchTown = '' or cl.vchTown is null, '', cl.vchTown) as 'candidate-city'
, iif(cl.vchCounty = '' or cl.vchCounty is null, '', cl.vchCounty) as 'candidate-state'
, iif(cl.vchPostcode = '' or cl.vchPostcode is null, '', cl.vchPostcode) as 'candidate-zipCode'
, iif(cl.sintCountryId &lt;&gt; 0, cl.vchCountryCode, iif(cl.fullAddress like '%London%' or cl.fullAddress like '%Oxford%' or cl.fullAddress like '%UK%', 'GB', iif(cl.fullAddress like '%New York%' or cl.fullAddress like '%NYC%','US',''))) as 'candidate-Country'
, isnull(co.canOwners,'') as 'candidate-owners'
, case
	when rn.vchNationalityName like '%Afghan%' then 'AF'
	when rn.vchNationalityName like '%Algeri%' then 'DZ'
	when rn.vchNationalityName like '%Africa%' then 'ZA'
	when rn.vchNationalityName like '%Albani%' then 'AL'
	when rn.vchNationalityName like '%America%' then 'US'
	when rn.vchNationalityName like '%Andorr%' then 'AD'
	when rn.vchNationalityName like '%Argentin%' then 'AR'
	when rn.vchNationalityName like '%Austra%' then 'AU'
	when rn.vchNationalityName like '%Austri%' then 'AT'
	when rn.vchNationalityName like '%Belgia%' then 'BE'
	when rn.vchNationalityName like '%Brazil%' then 'BR'
	when rn.vchNationalityName like 'Britis%' then 'GB'
	when rn.vchNationalityName like 'Bucha%' then 'RO'
	when rn.vchNationalityName like '%Bulgari%' then 'BG'
	when rn.vchNationalityName like 'Burmes%' then 'MM'
	when rn.vchNationalityName like 'Cambod%' then 'KH'
	when rn.vchNationalityName like 'Canadi%' then 'CA'
	when rn.vchNationalityName like 'Chines%' then 'CN'
	when rn.vchNationalityName like 'Colombi%' then 'CO'
	when rn.vchNationalityName like 'Costa%' then 'CR'
	when rn.vchNationalityName like '%Cypr%' then 'CY'
	when rn.vchNationalityName like '%Czech%' then 'CZ'
	when rn.vchNationalityName like '%Danish%' then 'DK'
	when rn.vchNationalityName like 'Denmark%' then 'DK'
	when rn.vchNationalityName like '%Dutch%' then 'NL'
	when rn.vchNationalityName like 'East%' then 'ZA'
	when rn.vchNationalityName like '%Egypt%' then 'EG'
	when rn.vchNationalityName like 'Emiria%' then 'AE'
	when rn.vchNationalityName like 'Eritre%' then 'ER'
	when rn.vchNationalityName like 'Estoni%' then 'EE'
	when rn.vchNationalityName like 'Ethiop%' then 'ET'
	when rn.vchNationalityName like 'Europe%' then 'TR'
	when rn.vchNationalityName like 'Fijian%' then 'FJ'
	when rn.vchNationalityName like 'Filipi%' then 'PH'
	when rn.vchNationalityName like 'fili%' then 'PH'
	when rn.vchNationalityName like 'Finnish%' then 'FI'
	when rn.vchNationalityName like 'Flemish%' then 'BE'
	when rn.vchNationalityName like 'French%' then 'FR'
	when rn.vchNationalityName like 'Gabone%' then 'GA'
	when rn.vchNationalityName like 'German%' then 'DE'
	when rn.vchNationalityName like '%Georgi%' then 'GE'
	when rn.vchNationalityName like 'Ghanai%' then 'GH'
	when rn.vchNationalityName like 'Gree%' then 'GR'
	when rn.vchNationalityName like 'Hunga%' then 'HU'
	when rn.vchNationalityName like 'Indian%' then 'IN'
	when rn.vchNationalityName like 'Indone%' then 'ID'
	when rn.vchNationalityName like 'Irania%' then 'IR'
	when rn.vchNationalityName like 'Iraq%' then 'IQ'
	when rn.vchNationalityName like 'Irish%' then 'IE'
	when rn.vchNationalityName like 'Isra%' then 'IL'
	when rn.vchNationalityName like 'Ital%' then 'IT'
	when rn.vchNationalityName like 'Jamaic%' then 'JM'
	when rn.vchNationalityName like 'Japane%' then 'JP'
	when rn.vchNationalityName like 'Keny%' then 'KE'
	when rn.vchNationalityName like 'Leban%' then 'LB'
	when rn.vchNationalityName like 'Lithua%' then 'LT'
	when rn.vchNationalityName like 'Malaga%' then 'MG'
	when rn.vchNationalityName like 'Malays%' then 'MY'
	when rn.vchNationalityName like 'Malt%' then 'MT'
	when rn.vchNationalityName like 'Mauritian%' then 'MU'
	when rn.vchNationalityName like 'Mexi%' then 'MX'
	when rn.vchNationalityName like 'Moroc%' then 'MA'
	when rn.vchNationalityName like 'Namibi%' then 'NA'
	when rn.vchNationalityName like 'New Zea%' then 'NZ'
	when rn.vchNationalityName like 'Nigeri%' then 'NG'
	when rn.vchNationalityName like 'Northern Irish' then 'IE'
	when rn.vchNationalityName like 'Norwe%' then 'NO'
	when rn.vchNationalityName like 'Pakist%' then 'PK'
	when rn.vchNationalityName like 'Philip%' then 'PH'
	when rn.vchNationalityName like 'Phili%' then 'PH'
	when rn.vchNationalityName like 'Polish%' then 'PL'
	when rn.vchNationalityName like 'Portu%' then 'PT'
	when rn.vchNationalityName like 'Romani%' then 'RO'
	when rn.vchNationalityName like 'Russia%' then 'RU'
	when rn.vchNationalityName like 'Senegal%' then 'SN'
	when rn.vchNationalityName like 'Serbia%' then 'RS'
	when rn.vchNationalityName like 'Singap%' then 'SG'
	when rn.vchNationalityName like 'Slovaki%' then 'SK'
	when rn.vchNationalityName like '%South Korea%' then 'KR'
	when rn.vchNationalityName like 'Sri%' then 'LK'
	when rn.vchNationalityName like 'South Africa%' then 'ZA'
	when rn.vchNationalityName like 'Spanish%' then 'ES'
	when rn.vchNationalityName like 'Sri Lanka%' then 'LK'
	when rn.vchNationalityName like 'Sri lanka%' then 'LK'
	when rn.vchNationalityName like 'Swedish%' then 'SE'
	when rn.vchNationalityName like 'Swiss%' then 'CH'
	when rn.vchNationalityName like 'Taiwan%' then 'TW'
	when rn.vchNationalityName like '%Ukrain%' then 'UA'
	when rn.vchNationalityName like 'Thai%' then 'TH'
	when rn.vchNationalityName like 'Trinida%' then 'TT'
	when rn.vchNationalityName like 'Turk%' then 'TR'
	when rn.vchNationalityName like 'Vietna%' then 'VN'
	--when rn.vchNationalityName like 'Yugoslavia%' then 'YU'
	when rn.vchNationalityName like '%UNITED%ARAB%' then 'AE'
	when rn.vchNationalityName like '%UAE%' then 'AE'
	when rn.vchNationalityName like '%U.A.E%' then 'AE'
	when rn.vchNationalityName like '%UNITED%KINGDOM%' then 'GB'
	when rn.vchNationalityName like '%UNITED%STATES%' then 'US'
	when rn.vchNationalityName like '%US%' then 'US'
	when rn.vchNationalityName like '%Zimbab%' then 'ZW'
else '' end as 'candidate-citizenship'
, coalesce(pce.vchExplicitJobTitle,c.vchJobTitle) as 'candidate-jobTitle1'
, isnull(coalesce(pce.vchExplicitCompanyName, pce.vchCompanyName),'') as 'candidate-employer1'
--, cwh.WorkHistory as 'candidate-workHistory'
--, cr.CVName as 'candidate-resumes'
--, iif(len(cd.CanDocs)>32000,'',cd.CanDocs) as 'candidate-resume'
--, catt.canAttributes as 'candidate-skills'
--, ccb.callBackInfo : just for testing
, left(
	concat('Candidate External ID: ',c.intCandidateId
	, concat(char(10), char(10),'Voyager Candidate Code: ',c.vchStandardRefCode)
	,iif(rcs.vchCandidateStatusName = '' or rcs.vchCandidateStatusName is NULL,'',concat(char(10), char(10),'Candidate Custom Status: ',rcs.vchCandidateStatusName))--use this for njf search and njf gtp
	,concat(char(10), char(10),'Actively looking? ', replace(replace(bitActivelyLooking,0,'No'),1,'Yes'))--use this for njf contracts db
	,iif(p.vchKnownAs = '' or p.vchKnownAs is null,'',concat(char(10), char(10),'Known As: ',p.vchKnownAs))
	,iif(rc2.vchCountryName = '' or rc2.vchCountryName is NULL,'',concat(char(10), char(10),'Place Of Birth: ',rc2.vchCountryName))
	--,iif(tahp.allHomePhone = '' or tahp.allHomePhone is NULL,'',concat(char(10), char(10),'Home Phone(s): ',tahp.allHomePhone))
	,iif(tam.allMobile = '' or tam.allMobile is NULL,'',concat(char(10), char(10),'Mobile(s): ', tam.allMobile))
	--,iif(he.homeEmail = '' or he.homeEmail is NULL,'',concat(char(10), char(10),'Home Email(s): ',he.homeEmail))
	--,iif(owe.workEmail = '' or owe.workEmail is NULL,'',concat(char(10), char(10),'Work Email: ',owe.workEmail))
	--,iif(f.fax = '' or f.fax is NULL,'',concat(char(10), char(10),'Fax: ', f.fax))
	--,iif(w.web = '' or w.web is NULL,'',concat(char(10), char(10),'Website: ', w.web))
	,iif(c.vchBasedIn = '' or c.vchBasedIn is NULL,'',concat(char(10), char(10),'Based In: ', c.vchBasedIn))
	--,concat(char(10), char(10),'Relocated Flag: ', c.bitRelocate)delete from importcandidate
	,iif(rms.vchMaritalStatusName = '' or rms.vchMaritalStatusName is NULL,'',concat(char(10), char(10),'Marital Status: ', rms.vchMaritalStatusName))
	--,iif(csrc.sources = '' or csrc.sources is NULL,'',concat(char(10), char(10),'Candidate Source(s): ',csrc.sources))
	,iif(npi.vchNoticePeriodIntervalName = '','',concat(char(10), char(10),'Notice Period Interval: ',npi.vchNoticePeriodIntervalName))
	,iif(c.tintNoticePeriodQuantity = 0,'',concat(char(10), char(10),'Notice Period Quantity: ', c.tintNoticePeriodQuantity))
	--,iif(ccb.CallBackInfo = '' or ccb.CallBackInfo is NULL,'',concat(char(10), char(10),'Call Back Records: ', char(10),ccb.CallBackInfo))
	,iif(c.vchSummary = '' or c.vchSummary is NULL,'',concat(char(10), char(10), 'Summary: ',char(10), c.vchSummary, ''))
	,iif(c.vchComment = '' or c.vchComment is NULL,'',concat(char(10), char(10), 'Comment: ',char(10), c.vchComment, ''))
	),32000) as 'candidate-note'--, vchForename, vchSurname
from dCandidate c
				left join dPerson p on c.intPersonId = p.intPersonId
				left join CandidateMainEmail cme on c.intCandidateId = cme.intCandidateId
				left join refTitle t on p.tintTitleId = t.tintTitleId
				left join candidateLocation cl on c.intCandidateId = cl.intCandidateId
				--left join CandiddateCallBack ccb on c.intCandidateId = ccb.intCandidateId
				--left join CanResumes cr on c.intCandidateId = cr.intCandidateId--select distinct bitActivelyLooking from dcandidate--select * from dcandidatesystemstatus
				--left join localCanDocuments cd on c.intCandidateId = cd.intCandidateId
				--left join Temp_Candidate_WorkHistory cwh on c.intCandidateId = cwh.intCandidateId
				left join CanOwners co on c.intCandidateId = co.intCandidateId
				left join refCandidateStatus rcs on c.tintCustomStatusId = rcs.tintCandidateStatusId--njf contract has no status field
				left join refNationality rn on p.sintNationality1Id =rn.sintNationalityId
				-- left join refCountry rc on p.sintNationality1Id = rc.sintCountryId
				-- left join refCountry rc1 on p.sintNationality4Id = rc1.sintCountryId
				left join refCountry rc2 on p.sintCountryOfOriginId = rc2.sintCountryId
				left join WorkPhone wp on c.intCandidateId = wp.intCandidateId --and wp.rn = 1 --refer from sTelecom--There is only 1 candidate has 2 work phone so combine as 1
				left join CanHomePhone hp on c.intCandidateId = hp.intCandidateId
				--left join temp_allHomePhone tahp on c.intCandidateId = tahp.intCandidateId
				left join CanMobile cm on c.intCandidateId = cm.intCandidateId
				left join temp_allMobile tam on c.intCandidateId = tam.intCandidateId
				--left join tempPreferredPhone pp on c.intCandidateId = pp.intCandidateId
				left join refMaritalStatus rms on p.tintMaritalStatusId = rms.tintMaritalStatusId
				--left join CanSources csrc on c.intCandidateId = csrc.intCandidateId
				left join refNoticePeriodInterval npi on c.tintNoticePeriodIntervalId = npi.tintNoticePeriodIntervalId
				left join dPersonCurrentEmployment pce on p.intPersonId = pce.intPersonId
				--left join CanAttributes catt on c.intCandidateId = catt.intCandidateId
				--left join Skype s on c.intCandidateId = s.intCandidateId
				--left join Fax f on c.intCandidateId = f.intCandidateId
				--left join Web w on c.intCandidateId = w.intCandidateId
				--left join HomeEmail he on c.intCandidateId = he.intCandidateId
				--left join WorkEmail we on c.intCandidateId = we.intCandidateId
				--left join OriginalWorkEmail owe on c.intCandidateId = owe.intCandidateId

				)

				select * from test</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>768</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>pick list</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>additional_form_values</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>Additional_type</column_name>
        <stream_name>Additional_type</stream_name>
      </field>
      <field>
        <column_name>insert_timestamp</column_name>
        <stream_name>insert_timestamp</stream_name>
      </field>
      <field>
        <column_name>field_id</column_name>
        <stream_name>field_id</stream_name>
      </field>
      <field>
        <column_name>form_id</column_name>
        <stream_name>form_id</stream_name>
      </field>
      <field>
        <column_name>additional_id</column_name>
        <stream_name>candidate_id</stream_name>
      </field>
      <field>
        <column_name>field_value</column_name>
        <stream_name>field_value_library</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>848</xloc>
      <yloc>1520</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>replaced applications</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>select decSalary
,intCandidateId as 'application-candidateExternalId'
,intJobId as 'application-positionExternalId'
, 1 as invoice_renewal_index
, 1 as invoice_renewal_flow_status
, 2 as invoice_status
, 3 as offer_draft_offer
, 1 as offer_valid
, 1 as offer_position_type
from dPlacement where decSalary &lt;&gt; '0.00'



</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>144</xloc>
      <yloc>320</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>update gross salary</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema/>
      <table>offer</table>
      <key>
        <name>OfferID</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name>offer_valid</name>
        <field>valid</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>pay_rate</name>
        <rename>decSalary</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>544</xloc>
      <yloc>144</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>update info</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>with 
maxInterviewLevel as (
       select intInterviewProcessId, max(intInterviewId) as maxInterviewLevelId--max(tintInterviewLevelId) as maxInterviewLebel
       from dInterview
       group by intInterviewProcessId)

, tempInterview as (
       select i.*
       from maxInterviewLevel mil 
       left join dInterview i on mil.maxInterviewLevelId = i.intInterviewId)

, latestPlacement as (
       select js.intJobId, js.intCandidateId, max(dtupdated) as latestUpdate--max(js.intPlacementId)--, vchSystemEventAction
       from dPlacement js 
       group by js.intJobId, js.intCandidateId)

, tempPlacement as (
       select p.*
       from dPlacement p left join latestPlacement lp on p.intJobId = lp.intJobId and p.intCandidateId = lp.intCandidateId and p.dtupdated = lp.latestUpdate
       where latestUpdate is not null)

, jobApp as (
       select js.intJobId, j.datStartDate, j.intCompanyId as CompID, js.intCandidateId, tintShortlisted, tintCommunicated, tintInterested, tintSummarySubmit, tintCVSubmit, tintInterview, i.intInterviewProcessId, iif(intInterviewId is null, 999999,intInterviewId) as intInterviewId, i.tintInterviewLevelId, vchInterviewLevelName, i.tintInterviewStatusId, vchInterviewStatusName, tintOffered, tintPlaced, intPlacementId, p.tintPlacementStatusId, vchPlacementStatusName, vchSystemEventAction
       from dJobShortlist js
       left join tempPlacement p on js.intJobId = p.intJobId and js.intCandidateId = p.intCandidateId
       left join refPlacementStatus ps on p.tintPlacementStatusId = ps.tintPlacementStatusId
       left join sEventAction ea on js.tintSystemEventActionId = ea.tintSystemEventActionId
       left join dInterviewProcess ip on js.intJobId = ip.intJobId and js.intCandidateId = ip.intCandidateId
       left join tempInterview i on ip.intInterviewProcessId = i.intInterviewProcessId
       left join refInterviewLevel il on i.tintInterviewLevelId = il.tintInterviewLevelId
       left join refInterviewStatus ris on i.tintInterviewStatusId = ris.tintInterviewStatusId
       left join dJob j on js.intJobId = j.intJobId)
       --where tintPlaced = 1 and intPlacementId is not null
       
--select distinct tintInterviewLevelId, vchInterviewLevelName from jobApp
--select * from  jobApp --where tintInterview>1 --where tintPlacementStatusId = 4 or tintPlacementStatusId =9
--select distinct from 
--select * from jobApp where intJobId = 5118
--CREATE TABLE temp_Can (
--    intCandidateId int
--);
--select distinct intCandidateId
--from  jobApp where intInterviewId &lt;&gt; 14264 and intInterviewId &lt;&gt; 13470 and CompID in (2,455)
--insert into importJobApp
, ja0 as (
select intJobId as intJobId, --'application-positionExternalId',
		intCandidateId as intCandidateId, --'application-candidateExternalId',
		isnull(datStartDate,'') as datStartDate,
		--*,
		isnull(iif(tintPlaced = 1, iif(tintPlacementStatusId in (4,9),'SENT','OFFERED'), --PLACED
		iif(tintOffered >1, 'SENT',
		iif(tintOffered =1, 'OFFERED',
		iif(tintInterviewStatusId in (6,7,8,9), 'SENT',
		iif(tintInterviewLevelId in (0,1,101,104), 'FIRST_INTERVIEW',
		iif(tintInterviewLevelId in (2,3,102,103,105,106), 'SECOND_INTERVIEW',
		iif(tintCVSubmit = 1 or tintSummarySubmit = 1, 'SENT','SHORTLISTED'))))))),'') as stage --'application-Stage'
				,isnull(iif(tintPlaced = 1, iif(tintPlacementStatusId in (4,9),'SENT','PLACED'), --PLACED
		iif(tintOffered >1, 'SENT',
		iif(tintOffered =1, 'OFFERED',
		iif(tintInterviewStatusId in (6,7,8,9), 'SENT',
		iif(tintInterviewLevelId in (0,1,101,104), 'FIRST_INTERVIEW',
		iif(tintInterviewLevelId in (2,3,102,103,105,106), 'SECOND_INTERVIEW',
		iif(tintCVSubmit = 1 or tintSummarySubmit = 1, 'SENT','SHORTLISTED'))))))),'') as final_stage
from  jobApp
--where intInterviewId &lt;&gt; 14264 and intInterviewId &lt;&gt; 13470 --and CompID in (2,455)--and intInterviewId = 7583
--and intCandidateId in (48445,31880)
--and intJobid in (4177,4236,4361,4683,4822,4992,5124,5227,5228,5229,5230,5231,5232,5233,5262,5270,5371,5402,5417,5418,5419,5420,5421,5422,5423,5424,5425,5426,5427,5428,5429,5430,5431,5432) 
--or intCandidateId in (48445,31880)--,44007,15490,44296,16796,38402,44798,44982,38455,15944,45834,45826,10987,22607,11200,52754,53354,19816,40589,44976,45050,44823,3334,44314,45794,22999,51044,2732,52304,44988)
)
--select * from refPlacementStatus

--select * from dJobShortlist where intJobId = 4221

, ja1 ("application-positionExternalId","application-candidateExternalId", datStartDate, "application-Stage",final_stage, rn) as (
       SELECT 
                intJobId
              , intCandidateId
              , convert(datetime, datStartDate) as datStartDate
              , stage
			  , final_stage
              , rn = ROW_NUMBER() OVER (PARTITION BY intJobId,intCandidateId,stage ORDER BY intJobId desc) FROM ja0 )

 -- select * from ja1 where ja1.rn = 1     -->> IMPORT: JOB APPLICATION

-- GROSS ANNUAL SALARY
select
       ja1.*
       , isnull(j.datStartDate,'') as 'position-startDate'
       , 1 as 'use_quick_fee_forecast'
	   , 1 as invoice_valid
, 1 as invoice_renewal_index
, 1 as invoice_renewal_flow_status
, 2 as invoice_status
, 3 as offer_draft_offer
, 1 as offer_valid
, 1 as offer_position_type
       --, convert(float, iif(j.decMaxSalaryFeePercentage is NULL,'',j.decMaxSalaryFeePercentage) ) as 'percentage_of_annual_salary' --'Use Quick Fee Forecast'
       --, convert(float, iif(j.decMaxSalaryFee is NULL,'',j.decMaxSalaryFee) ) as 'gross_annual_salary - pay_rate' -- 'Compensation SALARY TO'
from ja1 
left join dJob j on j.intJobId = ja1.[application-positionExternalId]
where [final_stage] = 'PLACED'
--where ja1.rn = 1 and ja1.[application-Stage] = 'PLACEMENT_PERMANENT'
--and [application-positionExternalId] = 'NJFS2379'</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>192</xloc>
      <yloc>400</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>update note</name>
    <type>Update</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <skip_lookup>N</skip_lookup>
    <commit>100</commit>
    <use_batch>N</use_batch>
    <error_ignored>N</error_ignored>
    <ignore_flag_field/>
    <lookup>
      <schema>public</schema>
      <table>offer_personal_info</table>
      <key>
        <name>offer_personal_id</name>
        <field>id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <value>
        <name>note</name>
        <rename>decSalary</rename>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>688</xloc>
      <yloc>448</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Company Doc</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>

with test as (select * from lAttachmentCompany)


select a.intCompanyId as external_id, a.dtInserted,
concat(b.intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType)))	
as file_name ,
'COMPANY' as 'entity_type',
'legal_document' as 'document_type'
from test a left join dAttachment b on a.intAttachmentId = b.intAttachmentId






</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>1152</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 8</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>company</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>external_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>company_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1072</xloc>
      <yloc>1152</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Database lookup 9</name>
    <type>DBLookup</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <cache>N</cache>
    <cache_load_all>N</cache_load_all>
    <cache_size>0</cache_size>
    <lookup>
      <schema/>
      <table>position_description</table>
      <orderby/>
      <fail_on_multiple>N</fail_on_multiple>
      <eat_row_on_failure>Y</eat_row_on_failure>
      <key>
        <name>external_id</name>
        <field>external_id</field>
        <condition>=</condition>
        <name2/>
      </key>
      <key>
        <name/>
        <field>deleted_timestamp</field>
        <condition>IS NULL</condition>
        <name2/>
      </key>
      <value>
        <name>id</name>
        <rename>job_id</rename>
        <default/>
        <type>None</type>
      </value>
    </lookup>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1072</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>job document</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>

with test as (select * from lAttachmentJob)


,test2 as (select a.intJobId as external_id, a.dtInserted,
concat(b.intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType)))	
as file_name ,
'POSITION' as 'entity_type',
'job_description' as 'document_type'
from test a left join dAttachment b on a.intAttachmentId = b.intAttachmentId)

select * from test2 where file_name not like '%.eml%'




</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 7</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>bulk_upload_document_mapping</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>file_name</column_name>
        <stream_name>file_name</stream_name>
      </field>
      <field>
        <column_name>entity_type</column_name>
        <stream_name>entity_type</stream_name>
      </field>
      <field>
        <column_name>document_type</column_name>
        <stream_name>document_type</stream_name>
      </field>
      <field>
        <column_name>entity_id</column_name>
        <stream_name>company_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1216</xloc>
      <yloc>1152</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>Table output 8</name>
    <type>TableOutput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Postgres</connection>
    <schema/>
    <table>bulk_upload_document_mapping</table>
    <commit>1000</commit>
    <truncate>N</truncate>
    <ignore_errors>N</ignore_errors>
    <use_batch>Y</use_batch>
    <specify_fields>Y</specify_fields>
    <partitioning_enabled>N</partitioning_enabled>
    <partitioning_field/>
    <partitioning_daily>N</partitioning_daily>
    <partitioning_monthly>Y</partitioning_monthly>
    <tablename_in_field>N</tablename_in_field>
    <tablename_field/>
    <tablename_in_table>Y</tablename_in_table>
    <return_keys>N</return_keys>
    <return_field/>
    <fields>
      <field>
        <column_name>file_name</column_name>
        <stream_name>file_name</stream_name>
      </field>
      <field>
        <column_name>entity_type</column_name>
        <stream_name>entity_type</stream_name>
      </field>
      <field>
        <column_name>document_type</column_name>
        <stream_name>document_type</stream_name>
      </field>
      <field>
        <column_name>entity_id</column_name>
        <stream_name>job_id</stream_name>
      </field>
    </fields>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>1216</xloc>
      <yloc>1216</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step>
    <name>candidate GDPR doc</name>
    <type>TableInput</type>
    <description/>
    <distribute>Y</distribute>
    <custom_distribution/>
    <copies>1</copies>
    <partitioning>
      <method>none</method>
      <schema_name/>
    </partitioning>
    <connection>Headway Source</connection>
    <sql>


select a.intCandidateId as external_id,
concat(b.intAttachmentId,'_',
  iif(right(vchAttachmentName,4)=vchFileType or right(vchAttachmentName,5)=vchFileType,replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_')
	, concat(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(left(vchAttachmentName,220),'?',''),' ','_'),'/','.'),'''',''),',','_'),'*','~'),'"','^'),'\',''),'|',''),':',''),char(10),''),char(13),''),'>',']'),'&lt;','['),char(9),'_'),'%','_'), vchFileType)))	
as file_name
,'resume' as 'document_type','CANDIDATE' as 'entity_type'
from lAttachmentCandidate a left join dAttachment b on a.intAttachmentId = b.intAttachmentId
where b.vchFileType &lt;&gt; '.eml'</sql>
    <limit>0</limit>
    <lookup/>
    <execute_each_row>N</execute_each_row>
    <variables_active>N</variables_active>
    <lazy_conversion_active>N</lazy_conversion_active>
    <cluster_schema/>
    <remotesteps>
      <input>
      </input>
      <output>
      </output>
    </remotesteps>
    <GUI>
      <xloc>960</xloc>
      <yloc>1088</yloc>
      <draw>Y</draw>
    </GUI>
  </step>
  <step_error_handling>
  </step_error_handling>
  <slave-step-copy-partition-distribution>
  </slave-step-copy-partition-distribution>
  <slave_transformation>N</slave_transformation>
</transformation>
